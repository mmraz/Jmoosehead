package org.mraz.moose.dao.factories.moose;

import com.felees.hbnpojogen.randomlib.data.dataGeneration.*;
import org.mraz.moose.dao.factories.moose.MooseDataPoolFactory;
import org.mraz.moose.dao.model.obj.moose.*;
import org.springframework.stereotype.Component;



/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class MooseDataPoolFactory {
	/** DB commit order. */
	private static final String[] commitOrder = new String[]{"PlayerSkills", "GroupSkills", "Aliases", "SkillSpell", "Races", "PlayerStats", "PlayerNotes", "PlayerLasts", "PlayerGroup", "PlayerGladiator", "PlayerDeity", "Player", "Group", "Deity", "Clans", "Attributes"};

    /**
     * Data pool factory for Aliases.
     * @return AliasesA Aliases object
     */
    public static Aliases getAliases() {

        Aliases aliases = new Aliases();    
        
        aliases.setBamfIn(BasicDataGenerator.generateRandomString(2048));
        aliases.setBamfOut(BasicDataGenerator.generateRandomString(2048));
        aliases.setClanId(BasicDataGenerator.generateRandomLong());
        aliases.setDescription(BasicDataGenerator.generateRandomString(4096));
        aliases.setEmail(BasicDataGenerator.generateRandomString(80));
        aliases.setGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerGenderEnum.class));
        aliases.setId(BasicDataGenerator.generateDate());
        aliases.setLevel(BasicDataGenerator.generateRandomLong());
        aliases.setLongDesc(BasicDataGenerator.generateRandomString(4096));
        aliases.setName(BasicDataGenerator.generateRandomString(20));
        aliases.setPassword(BasicDataGenerator.generateRandomString(45));
        aliases.setPlayed(BasicDataGenerator.generateRandomLong());
        aliases.setRaceId(BasicDataGenerator.generateRandomLong());
        aliases.setShortDesc(BasicDataGenerator.generateRandomString(80));
        aliases.setSurname(BasicDataGenerator.generateRandomString(45));
        aliases.setTitle(BasicDataGenerator.generateRandomString(80));
        aliases.setTrueGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerTrueGenderEnum.class));
        aliases.setTrust(BasicDataGenerator.generateRandomLong());
        aliases.setValue(BasicDataGenerator.generateRandomString(2048));
        aliases.setVersion(BasicDataGenerator.generateRandomLong());
        aliases.setWhoname(BasicDataGenerator.generateRandomString(20));

        return aliases;
    }

    /**
     * Data pool factory for Attributes.
     * @return AttributesA Attributes object
     */
    public static Attributes getAttributes() {

        Attributes attributes = new Attributes();    
        
        attributes.setAgility(BasicDataGenerator.generateRandomInt());
        attributes.setConstitution(BasicDataGenerator.generateRandomInt());
        attributes.setDexterity(BasicDataGenerator.generateRandomInt());
        attributes.setEndurance(BasicDataGenerator.generateRandomInt());
        attributes.setIntelligence(BasicDataGenerator.generateRandomInt());
        attributes.setIsModifier(BasicDataGenerator.generateRandomBoolean());
        attributes.setSocial(BasicDataGenerator.generateRandomInt());
        attributes.setStrength(BasicDataGenerator.generateRandomInt());
        attributes.setWisdom(BasicDataGenerator.generateRandomInt());

        return attributes;
    }

    /**
     * Data pool factory for Clans.
     * @return ClansA Clans object
     */
    public static Clans getClans() {

        Clans clans = new Clans();    
        
        clans.setHallVnum(BasicDataGenerator.generateRandomInt());
        clans.setHidden(BasicDataGenerator.generateRandomBoolean());
        clans.setIndependent(BasicDataGenerator.generateRandomBoolean());
        clans.setName(BasicDataGenerator.generateRandomString(45));
        clans.setPvp(BasicDataGenerator.generateRandomBoolean());
        clans.setWhoName(BasicDataGenerator.generateRandomString(20));

        return clans;
    }

    /**
     * Data pool factory for Deity.
     * @return DeityA Deity object
     */
    public static Deity getDeity() {

        Deity deity = new Deity();    
        
        deity.setName(BasicDataGenerator.generateRandomString(45));

        return deity;
    }

    /**
     * Data pool factory for Group.
     * @return GroupA Group object
     */
    public static Group getGroup() {

        Group group = new Group();    
        
        group.setName(BasicDataGenerator.generateRandomString(45));

        return group;
    }

    /**
     * Data pool factory for GroupSkills.
     * @return GroupSkills A GroupSkills object
     */
    public static GroupSkills getGroupSkills() {

        GroupSkills groupSkills =  getGroupSkills(
	        getSkillSpell());

		return groupSkills;
       
    }

     /**
     * Data pool factory for GroupSkills.
     * @param sn A valid SkillSpell object
     * @return GroupSkills A GroupSkills object
     */
    public static GroupSkills getGroupSkills(SkillSpell sn) {
        GroupSkills groupSkills = new GroupSkills();     
        groupSkills.setName(BasicDataGenerator.generateRandomString(45));
		if (sn != null) {
			sn.addGroupSkills (groupSkills);
		}

        return groupSkills;
    }

    /**
     * Data pool factory for Player.
     * @return PlayerA Player object
     */
    public static Player getPlayer() {

        Player player = new Player();    
        
        player.setBamfIn(BasicDataGenerator.generateRandomString(2048));
        player.setBamfOut(BasicDataGenerator.generateRandomString(2048));
        player.setClanId(BasicDataGenerator.generateRandomLong());
        player.setDescription(BasicDataGenerator.generateRandomString(4096));
        player.setEmail(BasicDataGenerator.generateRandomString(80));
        player.setGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerGenderEnum.class));
        player.setId(BasicDataGenerator.generateDate());
        player.setLevel(BasicDataGenerator.generateRandomLong());
        player.setLongDesc(BasicDataGenerator.generateRandomString(4096));
        player.setName(BasicDataGenerator.generateRandomString(20));
        player.setPassword(BasicDataGenerator.generateRandomString(45));
        player.setPlayed(BasicDataGenerator.generateRandomLong());
        player.setRaceId(BasicDataGenerator.generateRandomLong());
        player.setShortDesc(BasicDataGenerator.generateRandomString(80));
        player.setSurname(BasicDataGenerator.generateRandomString(45));
        player.setTitle(BasicDataGenerator.generateRandomString(80));
        player.setTrueGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerTrueGenderEnum.class));
        player.setTrust(BasicDataGenerator.generateRandomLong());
        player.setVersion(BasicDataGenerator.generateRandomLong());
        player.setWhoname(BasicDataGenerator.generateRandomString(20));

        return player;
    }

    /**
     * Data pool factory for PlayerDeity.
     * @return PlayerDeity A PlayerDeity object
     */
    public static PlayerDeity getPlayerDeity() {

        PlayerDeity playerDeity =  getPlayerDeity(
	        getDeity());

		return playerDeity;
       
    }

     /**
     * Data pool factory for PlayerDeity.
     * @param deity A valid Deity object
     * @return PlayerDeity A PlayerDeity object
     */
    public static PlayerDeity getPlayerDeity(Deity deity) {
        PlayerDeity playerDeity = new PlayerDeity();     
        playerDeity.setBamfIn(BasicDataGenerator.generateRandomString(2048));
        playerDeity.setBamfOut(BasicDataGenerator.generateRandomString(2048));
        playerDeity.setClanId(BasicDataGenerator.generateRandomLong());
		if (deity != null) {
			deity.addPlayerDeity (playerDeity);
		}
        playerDeity.setDescription(BasicDataGenerator.generateRandomString(4096));
        playerDeity.setEmail(BasicDataGenerator.generateRandomString(80));
        playerDeity.setGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerGenderEnum.class));
        playerDeity.setId(BasicDataGenerator.generateDate());
        playerDeity.setLevel(BasicDataGenerator.generateRandomLong());
        playerDeity.setLongDesc(BasicDataGenerator.generateRandomString(4096));
        playerDeity.setName(BasicDataGenerator.generateRandomString(20));
        playerDeity.setPassword(BasicDataGenerator.generateRandomString(45));
        playerDeity.setPlayed(BasicDataGenerator.generateRandomLong());
        playerDeity.setRaceId(BasicDataGenerator.generateRandomLong());
        playerDeity.setSacrificeCnt(BasicDataGenerator.generateRandomLong());
        playerDeity.setShortDesc(BasicDataGenerator.generateRandomString(80));
        playerDeity.setSurname(BasicDataGenerator.generateRandomString(45));
        playerDeity.setSwitchedTo(BasicDataGenerator.generateDate());
        playerDeity.setTitle(BasicDataGenerator.generateRandomString(80));
        playerDeity.setTrueGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerTrueGenderEnum.class));
        playerDeity.setTrust(BasicDataGenerator.generateRandomLong());
        playerDeity.setVersion(BasicDataGenerator.generateRandomLong());
        playerDeity.setWhoname(BasicDataGenerator.generateRandomString(20));

        return playerDeity;
    }

    /**
     * Data pool factory for PlayerGladiator.
     * @return PlayerGladiatorA PlayerGladiator object
     */
    public static PlayerGladiator getPlayerGladiator() {

        PlayerGladiator playerGladiator = new PlayerGladiator();    
        
        playerGladiator.setBamfIn(BasicDataGenerator.generateRandomString(2048));
        playerGladiator.setBamfOut(BasicDataGenerator.generateRandomString(2048));
        playerGladiator.setClanId(BasicDataGenerator.generateRandomLong());
        playerGladiator.setDescription(BasicDataGenerator.generateRandomString(4096));
        playerGladiator.setEmail(BasicDataGenerator.generateRandomString(80));
        playerGladiator.setGames(BasicDataGenerator.generateRandomLong());
        playerGladiator.setGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerGenderEnum.class));
        playerGladiator.setId(BasicDataGenerator.generateDate());
        playerGladiator.setKills(BasicDataGenerator.generateRandomLong());
        playerGladiator.setLevel(BasicDataGenerator.generateRandomLong());
        playerGladiator.setLongDesc(BasicDataGenerator.generateRandomString(4096));
        playerGladiator.setName(BasicDataGenerator.generateRandomString(20));
        playerGladiator.setPassword(BasicDataGenerator.generateRandomString(45));
        playerGladiator.setPlayed(BasicDataGenerator.generateRandomLong());
        playerGladiator.setRaceId(BasicDataGenerator.generateRandomLong());
        playerGladiator.setShortDesc(BasicDataGenerator.generateRandomString(80));
        playerGladiator.setSurname(BasicDataGenerator.generateRandomString(45));
        playerGladiator.setTeamGames(BasicDataGenerator.generateRandomLong());
        playerGladiator.setTeamKills(BasicDataGenerator.generateRandomLong());
        playerGladiator.setTeamWins(BasicDataGenerator.generateRandomLong());
        playerGladiator.setTitle(BasicDataGenerator.generateRandomString(80));
        playerGladiator.setTrueGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerTrueGenderEnum.class));
        playerGladiator.setTrust(BasicDataGenerator.generateRandomLong());
        playerGladiator.setVersion(BasicDataGenerator.generateRandomLong());
        playerGladiator.setWhoname(BasicDataGenerator.generateRandomString(20));
        playerGladiator.setWins(BasicDataGenerator.generateRandomLong());

        return playerGladiator;
    }

    /**
     * Data pool factory for PlayerGroup.
     * @return PlayerGroupA PlayerGroup object
     */
    public static PlayerGroup getPlayerGroup() {

        PlayerGroup playerGroup = new PlayerGroup();    
        
        playerGroup.setBamfIn(BasicDataGenerator.generateRandomString(2048));
        playerGroup.setBamfOut(BasicDataGenerator.generateRandomString(2048));
        playerGroup.setClanId(BasicDataGenerator.generateRandomLong());
        playerGroup.setDescription(BasicDataGenerator.generateRandomString(4096));
        playerGroup.setEmail(BasicDataGenerator.generateRandomString(80));
        playerGroup.setGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerGenderEnum.class));
        playerGroup.setId(BasicDataGenerator.generateDate());
        playerGroup.setLevel(BasicDataGenerator.generateRandomLong());
        playerGroup.setLongDesc(BasicDataGenerator.generateRandomString(4096));
        playerGroup.setName(BasicDataGenerator.generateRandomString(20));
        playerGroup.setPassword(BasicDataGenerator.generateRandomString(45));
        playerGroup.setPlayed(BasicDataGenerator.generateRandomLong());
        playerGroup.setRaceId(BasicDataGenerator.generateRandomLong());
        playerGroup.setShortDesc(BasicDataGenerator.generateRandomString(80));
        playerGroup.setSurname(BasicDataGenerator.generateRandomString(45));
        playerGroup.setTitle(BasicDataGenerator.generateRandomString(80));
        playerGroup.setTrueGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerTrueGenderEnum.class));
        playerGroup.setTrust(BasicDataGenerator.generateRandomLong());
        playerGroup.setVersion(BasicDataGenerator.generateRandomLong());
        playerGroup.setWhoname(BasicDataGenerator.generateRandomString(20));

        return playerGroup;
    }

    /**
     * Data pool factory for PlayerLasts.
     * @return PlayerLastsA PlayerLasts object
     */
    public static PlayerLasts getPlayerLasts() {

        PlayerLasts playerLasts = new PlayerLasts();    
        
        playerLasts.setAttacked(BasicDataGenerator.generateDate());
        playerLasts.setAttackedBy(BasicDataGenerator.generateDate());
        playerLasts.setAttackedByTimer(BasicDataGenerator.generateRandomLong());
        playerLasts.setBamfIn(BasicDataGenerator.generateRandomString(2048));
        playerLasts.setBamfOut(BasicDataGenerator.generateRandomString(2048));
        playerLasts.setClanId(BasicDataGenerator.generateRandomLong());
        playerLasts.setCombat(BasicDataGenerator.generateDate());
        playerLasts.setDeathDt(BasicDataGenerator.generateDate());
        playerLasts.setDescription(BasicDataGenerator.generateRandomString(4096));
        playerLasts.setEmail(BasicDataGenerator.generateRandomString(80));
        playerLasts.setGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerGenderEnum.class));
        playerLasts.setId(BasicDataGenerator.generateDate());
        playerLasts.setKilled(BasicDataGenerator.generateDate());
        playerLasts.setKilledBy(BasicDataGenerator.generateDate());
        playerLasts.setKilledDt(BasicDataGenerator.generateDate());
        playerLasts.setLevel(BasicDataGenerator.generateRandomLong());
        playerLasts.setLogin(BasicDataGenerator.generateDate());
        playerLasts.setLongDesc(BasicDataGenerator.generateRandomString(4096));
        playerLasts.setName(BasicDataGenerator.generateRandomString(20));
        playerLasts.setPassword(BasicDataGenerator.generateRandomString(45));
        playerLasts.setPlayed(BasicDataGenerator.generateRandomLong());
        playerLasts.setRaceId(BasicDataGenerator.generateRandomLong());
        playerLasts.setShortDesc(BasicDataGenerator.generateRandomString(80));
        playerLasts.setSurname(BasicDataGenerator.generateRandomString(45));
        playerLasts.setTitle(BasicDataGenerator.generateRandomString(80));
        playerLasts.setTrueGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerTrueGenderEnum.class));
        playerLasts.setTrust(BasicDataGenerator.generateRandomLong());
        playerLasts.setVersion(BasicDataGenerator.generateRandomLong());
        playerLasts.setWhoname(BasicDataGenerator.generateRandomString(20));

        return playerLasts;
    }

    /**
     * Data pool factory for PlayerNotes.
     * @return PlayerNotesA PlayerNotes object
     */
    public static PlayerNotes getPlayerNotes() {

        PlayerNotes playerNotes = new PlayerNotes();    
        
        playerNotes.setBamfIn(BasicDataGenerator.generateRandomString(2048));
        playerNotes.setBamfOut(BasicDataGenerator.generateRandomString(2048));
        playerNotes.setBug(BasicDataGenerator.generateRandomLong());
        playerNotes.setChange(BasicDataGenerator.generateRandomLong());
        playerNotes.setClan(BasicDataGenerator.generateRandomLong());
        playerNotes.setClanId(BasicDataGenerator.generateRandomLong());
        playerNotes.setDescription(BasicDataGenerator.generateRandomString(4096));
        playerNotes.setEmail(BasicDataGenerator.generateRandomString(80));
        playerNotes.setGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerGenderEnum.class));
        playerNotes.setId(BasicDataGenerator.generateDate());
        playerNotes.setIdea(BasicDataGenerator.generateRandomLong());
        playerNotes.setImmortal(BasicDataGenerator.generateRandomLong());
        playerNotes.setLevel(BasicDataGenerator.generateRandomLong());
        playerNotes.setLongDesc(BasicDataGenerator.generateRandomString(4096));
        playerNotes.setName(BasicDataGenerator.generateRandomString(20));
        playerNotes.setNews(BasicDataGenerator.generateRandomLong());
        playerNotes.setNote(BasicDataGenerator.generateRandomLong());
        playerNotes.setOoc(BasicDataGenerator.generateRandomLong());
        playerNotes.setPassword(BasicDataGenerator.generateRandomString(45));
        playerNotes.setPenalty(BasicDataGenerator.generateRandomLong());
        playerNotes.setPlayed(BasicDataGenerator.generateRandomLong());
        playerNotes.setQuestion(BasicDataGenerator.generateRandomLong());
        playerNotes.setRaceId(BasicDataGenerator.generateRandomLong());
        playerNotes.setShortDesc(BasicDataGenerator.generateRandomString(80));
        playerNotes.setSurname(BasicDataGenerator.generateRandomString(45));
        playerNotes.setTitle(BasicDataGenerator.generateRandomString(80));
        playerNotes.setTrueGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerTrueGenderEnum.class));
        playerNotes.setTrust(BasicDataGenerator.generateRandomLong());
        playerNotes.setVersion(BasicDataGenerator.generateRandomLong());
        playerNotes.setWhoname(BasicDataGenerator.generateRandomString(20));

        return playerNotes;
    }

    /**
     * Data pool factory for PlayerSkills.
     * @return PlayerSkills A PlayerSkills object
     */
    public static PlayerSkills getPlayerSkills() {

        PlayerSkills playerSkills =  getPlayerSkills(
	        getSkillSpell());

		return playerSkills;
       
    }

     /**
     * Data pool factory for PlayerSkills.
     * @param sn A valid SkillSpell object
     * @return PlayerSkills A PlayerSkills object
     */
    public static PlayerSkills getPlayerSkills(SkillSpell sn) {
        PlayerSkills playerSkills = new PlayerSkills();     
        playerSkills.setBamfIn(BasicDataGenerator.generateRandomString(2048));
        playerSkills.setBamfOut(BasicDataGenerator.generateRandomString(2048));
        playerSkills.setClanId(BasicDataGenerator.generateRandomLong());
        playerSkills.setDescription(BasicDataGenerator.generateRandomString(4096));
        playerSkills.setEmail(BasicDataGenerator.generateRandomString(80));
        playerSkills.setGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerGenderEnum.class));
        playerSkills.setId(BasicDataGenerator.generateDate());
        playerSkills.setLearnedPercent(BasicDataGenerator.generateRandomInt());
        playerSkills.setLevel(BasicDataGenerator.generateRandomLong());
        playerSkills.setLongDesc(BasicDataGenerator.generateRandomString(4096));
        playerSkills.setName(BasicDataGenerator.generateRandomString(20));
        playerSkills.setPassword(BasicDataGenerator.generateRandomString(45));
        playerSkills.setPlayed(BasicDataGenerator.generateRandomLong());
        playerSkills.setRaceId(BasicDataGenerator.generateRandomLong());
        playerSkills.setShortDesc(BasicDataGenerator.generateRandomString(80));
		if (sn != null) {
			sn.addPlayerSkills (playerSkills);
		}
        playerSkills.setSurname(BasicDataGenerator.generateRandomString(45));
        playerSkills.setTitle(BasicDataGenerator.generateRandomString(80));
        playerSkills.setTrueGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerTrueGenderEnum.class));
        playerSkills.setTrust(BasicDataGenerator.generateRandomLong());
        playerSkills.setVersion(BasicDataGenerator.generateRandomLong());
        playerSkills.setWhoname(BasicDataGenerator.generateRandomString(20));

        return playerSkills;
    }

    /**
     * Data pool factory for PlayerStats.
     * @return PlayerStatsA PlayerStats object
     */
    public static PlayerStats getPlayerStats() {

        PlayerStats playerStats = new PlayerStats();    
        
        playerStats.setAc0(BasicDataGenerator.generateRandomInt());
        playerStats.setAc1(BasicDataGenerator.generateRandomInt());
        playerStats.setAc2(BasicDataGenerator.generateRandomInt());
        playerStats.setAc3(BasicDataGenerator.generateRandomInt());
        playerStats.setAlignment(BasicDataGenerator.generateRandomInt());
        playerStats.setBamfIn(BasicDataGenerator.generateRandomString(2048));
        playerStats.setBamfOut(BasicDataGenerator.generateRandomString(2048));
        playerStats.setBank(BasicDataGenerator.generateRandomLong());
        playerStats.setClanId(BasicDataGenerator.generateRandomLong());
        playerStats.setDamroll(BasicDataGenerator.generateRandomInt());
        playerStats.setDescription(BasicDataGenerator.generateRandomString(4096));
        playerStats.setEmail(BasicDataGenerator.generateRandomString(80));
        playerStats.setGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerGenderEnum.class));
        playerStats.setGold(BasicDataGenerator.generateRandomLong());
        playerStats.setHitroll(BasicDataGenerator.generateRandomInt());
        playerStats.setHp(BasicDataGenerator.generateRandomInt());
        playerStats.setId(BasicDataGenerator.generateDate());
        playerStats.setIncognito(BasicDataGenerator.generateRandomInt());
        playerStats.setInvisible(BasicDataGenerator.generateRandomInt());
        playerStats.setLevel(BasicDataGenerator.generateRandomLong());
        playerStats.setLongDesc(BasicDataGenerator.generateRandomString(4096));
        playerStats.setMana(BasicDataGenerator.generateRandomInt());
        playerStats.setMaxHp(BasicDataGenerator.generateRandomInt());
        playerStats.setMaxMana(BasicDataGenerator.generateRandomInt());
        playerStats.setMaxMove(BasicDataGenerator.generateRandomInt());
        playerStats.setMove(BasicDataGenerator.generateRandomInt());
        playerStats.setName(BasicDataGenerator.generateRandomString(20));
        playerStats.setPassword(BasicDataGenerator.generateRandomString(45));
        playerStats.setPlayed(BasicDataGenerator.generateRandomLong());
        playerStats.setPractice(BasicDataGenerator.generateRandomInt());
        playerStats.setRaceId(BasicDataGenerator.generateRandomLong());
        playerStats.setSavingThrow(BasicDataGenerator.generateRandomInt());
        playerStats.setSecondDamroll(BasicDataGenerator.generateRandomInt());
        playerStats.setSecondHitroll(BasicDataGenerator.generateRandomInt());
        playerStats.setShortDesc(BasicDataGenerator.generateRandomString(80));
        playerStats.setSilver(BasicDataGenerator.generateRandomLong());
        playerStats.setSkill(BasicDataGenerator.generateRandomInt());
        playerStats.setSurname(BasicDataGenerator.generateRandomString(45));
        playerStats.setTitle(BasicDataGenerator.generateRandomString(80));
        playerStats.setTraining(BasicDataGenerator.generateRandomInt());
        playerStats.setTrueGender(BasicDataGenerator.generateRandomEnumFromClass(org.mraz.moose.dao.enums.db.moose.PlayerTrueGenderEnum.class));
        playerStats.setTrust(BasicDataGenerator.generateRandomLong());
        playerStats.setVersion(BasicDataGenerator.generateRandomLong());
        playerStats.setWhoname(BasicDataGenerator.generateRandomString(20));
        playerStats.setWimpy(BasicDataGenerator.generateRandomInt());

        return playerStats;
    }

    /**
     * Data pool factory for Races.
     * @return RacesA Races object
     */
    public static Races getRaces() {

        Races races = new Races();    
        
        races.setName(BasicDataGenerator.generateRandomString(20));
        races.setStatAgt(BasicDataGenerator.generateRandomInt());
        races.setStatCon(BasicDataGenerator.generateRandomInt());
        races.setStatDex(BasicDataGenerator.generateRandomInt());
        races.setStatEnd(BasicDataGenerator.generateRandomInt());
        races.setStatInt(BasicDataGenerator.generateRandomInt());
        races.setStatSoc(BasicDataGenerator.generateRandomInt());
        races.setStatStr(BasicDataGenerator.generateRandomInt());
        races.setStatWis(BasicDataGenerator.generateRandomInt());

        return races;
    }

    /**
     * Data pool factory for SkillSpell.
     * @return SkillSpellA SkillSpell object
     */
    public static SkillSpell getSkillSpell() {

        SkillSpell skillSpell = new SkillSpell();    
        

        return skillSpell;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public static String[] getDBCommitOrder() {
		return commitOrder;
	}
}