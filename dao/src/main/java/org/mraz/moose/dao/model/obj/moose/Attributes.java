package org.mraz.moose.dao.model.obj.moose;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.mraz.moose.dao.model.obj.moose.iface.IAttributes;


/** 
 * Object mapping for hibernate-handled table: attributes.
 * @author autogenerated
 */

@Entity
@Table(name = "attributes", catalog = "moose")
public class Attributes implements Cloneable, Serializable, IPojoGenEntity, IAttributes {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559033539L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Long> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Long>());
	
	/** hashCode temporary storage. */
	private volatile Long hashCode;
	

	/** Field mapping. */
	private Integer agility;
	/** Field mapping. */
	private Integer constitution;
	/** Field mapping. */
	private Integer dexterity;
	/** Field mapping. */
	private Integer endurance;
	/** Field mapping. */
	private Long id = 0L; // init for hibernate bug workaround
	/** Field mapping. */
	private Integer intelligence;
	/** Field mapping. */
	private Boolean isModifier;
	/** Field mapping. */
	private Integer social;
	/** Field mapping. */
	private Integer strength;
	/** Field mapping. */
	private Integer wisdom;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Attributes() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Attributes(Long id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param agility Integer object;
	 * @param constitution Integer object;
	 * @param dexterity Integer object;
	 * @param endurance Integer object;
	 * @param id Long object;
	 * @param intelligence Integer object;
	 * @param isModifier Boolean object;
	 * @param social Integer object;
	 * @param strength Integer object;
	 * @param wisdom Integer object;
	 */
	public Attributes(Integer agility, Integer constitution, Integer dexterity, 					
			Integer endurance, Long id, Integer intelligence, 					
			Boolean isModifier, Integer social, Integer strength, 					
			Integer wisdom) {

		this.agility = agility;
		this.constitution = constitution;
		this.dexterity = dexterity;
		this.endurance = endurance;
		this.id = id;
		this.intelligence = intelligence;
		this.isModifier = isModifier;
		this.social = social;
		this.strength = strength;
		this.wisdom = wisdom;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Attributes.class;
	}
 

    /**
     * Return the value associated with the column: agility.
	 * @return A Integer object (this.agility)
	 */
	@Column( nullable = false  )
	public Integer getAgility() {
		return this.agility;
		
	}
	

  
    /**  
     * Set the value related to the column: agility.
	 * @param agility the agility value you wish to set
	 */
	public void setAgility(final Integer agility) {
		this.agility = agility;
	}

    /**
     * Return the value associated with the column: constitution.
	 * @return A Integer object (this.constitution)
	 */
	@Column( nullable = false  )
	public Integer getConstitution() {
		return this.constitution;
		
	}
	

  
    /**  
     * Set the value related to the column: constitution.
	 * @param constitution the constitution value you wish to set
	 */
	public void setConstitution(final Integer constitution) {
		this.constitution = constitution;
	}

    /**
     * Return the value associated with the column: dexterity.
	 * @return A Integer object (this.dexterity)
	 */
	@Column( nullable = false  )
	public Integer getDexterity() {
		return this.dexterity;
		
	}
	

  
    /**  
     * Set the value related to the column: dexterity.
	 * @param dexterity the dexterity value you wish to set
	 */
	public void setDexterity(final Integer dexterity) {
		this.dexterity = dexterity;
	}

    /**
     * Return the value associated with the column: endurance.
	 * @return A Integer object (this.endurance)
	 */
	@Column( nullable = false  )
	public Integer getEndurance() {
		return this.endurance;
		
	}
	

  
    /**  
     * Set the value related to the column: endurance.
	 * @param endurance the endurance value you wish to set
	 */
	public void setEndurance(final Integer endurance) {
		this.endurance = endurance;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Long object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column( name = "owner_id", nullable = false  )
	public Long getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Long id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0L) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: intelligence.
	 * @return A Integer object (this.intelligence)
	 */
	@Column( nullable = false  )
	public Integer getIntelligence() {
		return this.intelligence;
		
	}
	

  
    /**  
     * Set the value related to the column: intelligence.
	 * @param intelligence the intelligence value you wish to set
	 */
	public void setIntelligence(final Integer intelligence) {
		this.intelligence = intelligence;
	}

    /**
     * Return the value associated with the column: isModifier.
	 * @return A Boolean object (this.isModifier)
	 */
	@Column( name = "is_modifier", nullable = false  )
	public Boolean isIsModifier() {
		return this.isModifier;
		
	}
	

  
    /**  
     * Set the value related to the column: isModifier.
	 * @param isModifier the isModifier value you wish to set
	 */
	public void setIsModifier(final Boolean isModifier) {
		this.isModifier = isModifier;
	}

    /**
     * Return the value associated with the column: social.
	 * @return A Integer object (this.social)
	 */
	@Column( nullable = false  )
	public Integer getSocial() {
		return this.social;
		
	}
	

  
    /**  
     * Set the value related to the column: social.
	 * @param social the social value you wish to set
	 */
	public void setSocial(final Integer social) {
		this.social = social;
	}

    /**
     * Return the value associated with the column: strength.
	 * @return A Integer object (this.strength)
	 */
	@Column( nullable = false  )
	public Integer getStrength() {
		return this.strength;
		
	}
	

  
    /**  
     * Set the value related to the column: strength.
	 * @param strength the strength value you wish to set
	 */
	public void setStrength(final Integer strength) {
		this.strength = strength;
	}

    /**
     * Return the value associated with the column: wisdom.
	 * @return A Integer object (this.wisdom)
	 */
	@Column( nullable = false  )
	public Integer getWisdom() {
		return this.wisdom;
		
	}
	

  
    /**  
     * Set the value related to the column: wisdom.
	 * @param wisdom the wisdom value you wish to set
	 */
	public void setWisdom(final Integer wisdom) {
		this.wisdom = wisdom;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Attributes clone() throws CloneNotSupportedException {
		
        final Attributes copy = (Attributes)super.clone();

		copy.setAgility(this.getAgility());
		copy.setConstitution(this.getConstitution());
		copy.setDexterity(this.getDexterity());
		copy.setEndurance(this.getEndurance());
		copy.setId(this.getId());
		copy.setIntelligence(this.getIntelligence());
		copy.setIsModifier(this.isIsModifier());
		copy.setSocial(this.getSocial());
		copy.setStrength(this.getStrength());
		copy.setWisdom(this.getWisdom());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("agility: " + this.getAgility() + ", ");
		sb.append("constitution: " + this.getConstitution() + ", ");
		sb.append("dexterity: " + this.getDexterity() + ", ");
		sb.append("endurance: " + this.getEndurance() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("intelligence: " + this.getIntelligence() + ", ");
		sb.append("isModifier: " + this.isIsModifier() + ", ");
		sb.append("social: " + this.getSocial() + ", ");
		sb.append("strength: " + this.getStrength() + ", ");
		sb.append("wisdom: " + this.getWisdom());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Attributes that; 
		try {
			that = (Attributes) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAgility() == null) && (that.getAgility() == null)) || (getAgility() != null && getAgility().equals(that.getAgility())));
		result = result && (((getConstitution() == null) && (that.getConstitution() == null)) || (getConstitution() != null && getConstitution().equals(that.getConstitution())));
		result = result && (((getDexterity() == null) && (that.getDexterity() == null)) || (getDexterity() != null && getDexterity().equals(that.getDexterity())));
		result = result && (((getEndurance() == null) && (that.getEndurance() == null)) || (getEndurance() != null && getEndurance().equals(that.getEndurance())));
		result = result && (((getIntelligence() == null) && (that.getIntelligence() == null)) || (getIntelligence() != null && getIntelligence().equals(that.getIntelligence())));
		result = result && (((isIsModifier() == null) && (that.isIsModifier() == null)) || (isIsModifier() != null && isIsModifier().equals(that.isIsModifier())));
		result = result && (((getSocial() == null) && (that.getSocial() == null)) || (getSocial() != null && getSocial().equals(that.getSocial())));
		result = result && (((getStrength() == null) && (that.getStrength() == null)) || (getStrength() != null && getStrength().equals(that.getStrength())));
		result = result && (((getWisdom() == null) && (that.getWisdom() == null)) || (getWisdom() != null && getWisdom().equals(that.getWisdom())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Long newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0L) {
							newHashCode = getId();
						} else {
							newHashCode = (long) super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
		return (int) (this.hashCode & 0xffffff);
	}
	

	
}
