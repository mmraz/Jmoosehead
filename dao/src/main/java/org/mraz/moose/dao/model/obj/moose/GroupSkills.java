package org.mraz.moose.dao.model.obj.moose;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.mraz.moose.dao.enums.subtype.moose.GroupSubclassType;
import org.mraz.moose.dao.model.obj.moose.iface.IGroupSkills;


/** 
 * Object mapping for hibernate-handled table: group_skills.
 * @author autogenerated
 */

@Entity
@PrimaryKeyJoinColumn(name = "group_id")
@Table(name = "group_skills", catalog = "moose")
public class GroupSkills extends Group implements Cloneable, Serializable, IPojoGenEntity, IGroupSkills {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559033535L;

	

	/** Field mapping. */
	private SkillSpell sn;
 

	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return GroupSubclassType enum.
 	 */
 	@Transient
 	@Override
 	public GroupSubclassType getGroupSubclassType() {
		return GroupSubclassType.GROUP_SKILLS;
 	}  

 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Override
	@Transient
	public Class<?> getClassType() {
		return GroupSkills.class;
	}
 

    /**
     * Return the value associated with the column: sn.
	 * @return A SkillSpell object (this.sn)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "SN", nullable = false )
	public SkillSpell getSn() {
		return this.sn;
		
	}
	

  
    /**  
     * Set the value related to the column: sn.
	 * @param sn the sn value you wish to set
	 */
	public void setSn(final SkillSpell sn) {
		this.sn = sn;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public GroupSkills clone() throws CloneNotSupportedException {
		
        final GroupSkills copy = (GroupSkills)super.clone();

		copy.setSn(this.getSn());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		if (this.getClass().getSuperclass() != this.getClass()) {
			sb.append("(super.toString=" + super.toString() + ")");
		}
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final GroupSkills that; 
		try {
			that = (GroupSkills) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		if (this.getClass().getSuperclass() != this.getClass()) {
			result = super.equals(that);
		}
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getSn() == null) && (that.getSn() == null)) || (getSn() != null && getSn().getId().equals(that.getSn().getId())));	
		return result;
	}
	
	

	
}
