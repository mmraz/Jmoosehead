package org.mraz.moose.dao.model.obj.moose;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.mraz.moose.dao.enums.subtype.moose.PlayerSubclassType;
import org.mraz.moose.dao.model.obj.moose.iface.IPlayerGladiator;


/** 
 * Object mapping for hibernate-handled table: player_gladiator.
 * @author autogenerated
 */

@Entity
@PrimaryKeyJoinColumn(name = "player_id")
@Table(name = "player_gladiator", catalog = "moose")
public class PlayerGladiator extends Player implements Cloneable, Serializable, IPojoGenEntity, IPlayerGladiator {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559033532L;

	

	/** Field mapping. */
	private Long games;
	/** Field mapping. */
	private Long kills;
	/** Field mapping. */
	private Long teamGames;
	/** Field mapping. */
	private Long teamKills;
	/** Field mapping. */
	private Long teamWins;
	/** Field mapping. */
	private Long wins;
 

	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return PlayerSubclassType enum.
 	 */
 	@Transient
 	@Override
 	public PlayerSubclassType getPlayerSubclassType() {
		return PlayerSubclassType.PLAYER_GLADIATOR;
 	}  

 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Override
	@Transient
	public Class<?> getClassType() {
		return PlayerGladiator.class;
	}
 

    /**
     * Return the value associated with the column: games.
	 * @return A Long object (this.games)
	 */
	@Column( nullable = false  )
	public Long getGames() {
		return this.games;
		
	}
	

  
    /**  
     * Set the value related to the column: games.
	 * @param games the games value you wish to set
	 */
	public void setGames(final Long games) {
		this.games = games;
	}

    /**
     * Return the value associated with the column: kills.
	 * @return A Long object (this.kills)
	 */
	@Column( nullable = false  )
	public Long getKills() {
		return this.kills;
		
	}
	

  
    /**  
     * Set the value related to the column: kills.
	 * @param kills the kills value you wish to set
	 */
	public void setKills(final Long kills) {
		this.kills = kills;
	}

    /**
     * Return the value associated with the column: teamGames.
	 * @return A Long object (this.teamGames)
	 */
	@Column( name = "team_games", nullable = false  )
	public Long getTeamGames() {
		return this.teamGames;
		
	}
	

  
    /**  
     * Set the value related to the column: teamGames.
	 * @param teamGames the teamGames value you wish to set
	 */
	public void setTeamGames(final Long teamGames) {
		this.teamGames = teamGames;
	}

    /**
     * Return the value associated with the column: teamKills.
	 * @return A Long object (this.teamKills)
	 */
	@Column( name = "team_kills", nullable = false  )
	public Long getTeamKills() {
		return this.teamKills;
		
	}
	

  
    /**  
     * Set the value related to the column: teamKills.
	 * @param teamKills the teamKills value you wish to set
	 */
	public void setTeamKills(final Long teamKills) {
		this.teamKills = teamKills;
	}

    /**
     * Return the value associated with the column: teamWins.
	 * @return A Long object (this.teamWins)
	 */
	@Column( name = "team_wins", nullable = false  )
	public Long getTeamWins() {
		return this.teamWins;
		
	}
	

  
    /**  
     * Set the value related to the column: teamWins.
	 * @param teamWins the teamWins value you wish to set
	 */
	public void setTeamWins(final Long teamWins) {
		this.teamWins = teamWins;
	}

    /**
     * Return the value associated with the column: wins.
	 * @return A Long object (this.wins)
	 */
	@Column( nullable = false  )
	public Long getWins() {
		return this.wins;
		
	}
	

  
    /**  
     * Set the value related to the column: wins.
	 * @param wins the wins value you wish to set
	 */
	public void setWins(final Long wins) {
		this.wins = wins;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public PlayerGladiator clone() throws CloneNotSupportedException {
		
        final PlayerGladiator copy = (PlayerGladiator)super.clone();

		copy.setGames(this.getGames());
		copy.setKills(this.getKills());
		copy.setTeamGames(this.getTeamGames());
		copy.setTeamKills(this.getTeamKills());
		copy.setTeamWins(this.getTeamWins());
		copy.setWins(this.getWins());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("games: " + this.getGames() + ", ");
		sb.append("kills: " + this.getKills() + ", ");
		sb.append("teamGames: " + this.getTeamGames() + ", ");
		sb.append("teamKills: " + this.getTeamKills() + ", ");
		sb.append("teamWins: " + this.getTeamWins() + ", ");
		sb.append("wins: " + this.getWins());
		if (this.getClass().getSuperclass() != this.getClass()) {
			sb.append("(super.toString=" + super.toString() + ")");
		}
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final PlayerGladiator that; 
		try {
			that = (PlayerGladiator) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		if (this.getClass().getSuperclass() != this.getClass()) {
			result = super.equals(that);
		}
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getGames() == null) && (that.getGames() == null)) || (getGames() != null && getGames().equals(that.getGames())));
		result = result && (((getKills() == null) && (that.getKills() == null)) || (getKills() != null && getKills().equals(that.getKills())));
		result = result && (((getTeamGames() == null) && (that.getTeamGames() == null)) || (getTeamGames() != null && getTeamGames().equals(that.getTeamGames())));
		result = result && (((getTeamKills() == null) && (that.getTeamKills() == null)) || (getTeamKills() != null && getTeamKills().equals(that.getTeamKills())));
		result = result && (((getTeamWins() == null) && (that.getTeamWins() == null)) || (getTeamWins() != null && getTeamWins().equals(that.getTeamWins())));
		result = result && (((getWins() == null) && (that.getWins() == null)) || (getWins() != null && getWins().equals(that.getWins())));
		return result;
	}
	
	

	
}
