package org.mraz.moose.dao.model.obj.moose;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.mraz.moose.dao.enums.subtype.moose.PlayerSubclassType;
import org.mraz.moose.dao.model.obj.moose.iface.IPlayerNotes;


/** 
 * Object mapping for hibernate-handled table: player_notes.
 * @author autogenerated
 */

@Entity
@PrimaryKeyJoinColumn(name = "player_id")
@Table(name = "player_notes", catalog = "moose")
public class PlayerNotes extends Player implements Cloneable, Serializable, IPojoGenEntity, IPlayerNotes {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559033529L;

	

	/** Field mapping. */
	private Long bug;
	/** Field mapping. */
	private Long change;
	/** Field mapping. */
	private Long clan;
	/** Field mapping. */
	private Long idea;
	/** Field mapping. */
	private Long immortal;
	/** Field mapping. */
	private Long news;
	/** Field mapping. */
	private Long note;
	/** Field mapping. */
	private Long ooc;
	/** Field mapping. */
	private Long penalty;
	/** Field mapping. */
	private Long question;
 

	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return PlayerSubclassType enum.
 	 */
 	@Transient
 	@Override
 	public PlayerSubclassType getPlayerSubclassType() {
		return PlayerSubclassType.PLAYER_NOTES;
 	}  

 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Override
	@Transient
	public Class<?> getClassType() {
		return PlayerNotes.class;
	}
 

    /**
     * Return the value associated with the column: bug.
	 * @return A Long object (this.bug)
	 */
	@Column( nullable = false  )
	public Long getBug() {
		return this.bug;
		
	}
	

  
    /**  
     * Set the value related to the column: bug.
	 * @param bug the bug value you wish to set
	 */
	public void setBug(final Long bug) {
		this.bug = bug;
	}

    /**
     * Return the value associated with the column: change.
	 * @return A Long object (this.change)
	 */
	@Column( nullable = false  )
	public Long getChange() {
		return this.change;
		
	}
	

  
    /**  
     * Set the value related to the column: change.
	 * @param change the change value you wish to set
	 */
	public void setChange(final Long change) {
		this.change = change;
	}

    /**
     * Return the value associated with the column: clan.
	 * @return A Long object (this.clan)
	 */
	@Column( nullable = false  )
	public Long getClan() {
		return this.clan;
		
	}
	

  
    /**  
     * Set the value related to the column: clan.
	 * @param clan the clan value you wish to set
	 */
	public void setClan(final Long clan) {
		this.clan = clan;
	}

    /**
     * Return the value associated with the column: idea.
	 * @return A Long object (this.idea)
	 */
	@Column( nullable = false  )
	public Long getIdea() {
		return this.idea;
		
	}
	

  
    /**  
     * Set the value related to the column: idea.
	 * @param idea the idea value you wish to set
	 */
	public void setIdea(final Long idea) {
		this.idea = idea;
	}

    /**
     * Return the value associated with the column: immortal.
	 * @return A Long object (this.immortal)
	 */
	@Column( nullable = false  )
	public Long getImmortal() {
		return this.immortal;
		
	}
	

  
    /**  
     * Set the value related to the column: immortal.
	 * @param immortal the immortal value you wish to set
	 */
	public void setImmortal(final Long immortal) {
		this.immortal = immortal;
	}

    /**
     * Return the value associated with the column: news.
	 * @return A Long object (this.news)
	 */
	@Column( nullable = false  )
	public Long getNews() {
		return this.news;
		
	}
	

  
    /**  
     * Set the value related to the column: news.
	 * @param news the news value you wish to set
	 */
	public void setNews(final Long news) {
		this.news = news;
	}

    /**
     * Return the value associated with the column: note.
	 * @return A Long object (this.note)
	 */
	@Column( nullable = false  )
	public Long getNote() {
		return this.note;
		
	}
	

  
    /**  
     * Set the value related to the column: note.
	 * @param note the note value you wish to set
	 */
	public void setNote(final Long note) {
		this.note = note;
	}

    /**
     * Return the value associated with the column: ooc.
	 * @return A Long object (this.ooc)
	 */
	@Column( nullable = false  )
	public Long getOoc() {
		return this.ooc;
		
	}
	

  
    /**  
     * Set the value related to the column: ooc.
	 * @param ooc the ooc value you wish to set
	 */
	public void setOoc(final Long ooc) {
		this.ooc = ooc;
	}

    /**
     * Return the value associated with the column: penalty.
	 * @return A Long object (this.penalty)
	 */
	@Column( nullable = false  )
	public Long getPenalty() {
		return this.penalty;
		
	}
	

  
    /**  
     * Set the value related to the column: penalty.
	 * @param penalty the penalty value you wish to set
	 */
	public void setPenalty(final Long penalty) {
		this.penalty = penalty;
	}

    /**
     * Return the value associated with the column: question.
	 * @return A Long object (this.question)
	 */
	@Column( nullable = false  )
	public Long getQuestion() {
		return this.question;
		
	}
	

  
    /**  
     * Set the value related to the column: question.
	 * @param question the question value you wish to set
	 */
	public void setQuestion(final Long question) {
		this.question = question;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public PlayerNotes clone() throws CloneNotSupportedException {
		
        final PlayerNotes copy = (PlayerNotes)super.clone();

		copy.setBug(this.getBug());
		copy.setChange(this.getChange());
		copy.setClan(this.getClan());
		copy.setIdea(this.getIdea());
		copy.setImmortal(this.getImmortal());
		copy.setNews(this.getNews());
		copy.setNote(this.getNote());
		copy.setOoc(this.getOoc());
		copy.setPenalty(this.getPenalty());
		copy.setQuestion(this.getQuestion());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("bug: " + this.getBug() + ", ");
		sb.append("change: " + this.getChange() + ", ");
		sb.append("clan: " + this.getClan() + ", ");
		sb.append("idea: " + this.getIdea() + ", ");
		sb.append("immortal: " + this.getImmortal() + ", ");
		sb.append("news: " + this.getNews() + ", ");
		sb.append("note: " + this.getNote() + ", ");
		sb.append("ooc: " + this.getOoc() + ", ");
		sb.append("penalty: " + this.getPenalty() + ", ");
		sb.append("question: " + this.getQuestion());
		if (this.getClass().getSuperclass() != this.getClass()) {
			sb.append("(super.toString=" + super.toString() + ")");
		}
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final PlayerNotes that; 
		try {
			that = (PlayerNotes) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		if (this.getClass().getSuperclass() != this.getClass()) {
			result = super.equals(that);
		}
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getBug() == null) && (that.getBug() == null)) || (getBug() != null && getBug().equals(that.getBug())));
		result = result && (((getChange() == null) && (that.getChange() == null)) || (getChange() != null && getChange().equals(that.getChange())));
		result = result && (((getClan() == null) && (that.getClan() == null)) || (getClan() != null && getClan().equals(that.getClan())));
		result = result && (((getIdea() == null) && (that.getIdea() == null)) || (getIdea() != null && getIdea().equals(that.getIdea())));
		result = result && (((getImmortal() == null) && (that.getImmortal() == null)) || (getImmortal() != null && getImmortal().equals(that.getImmortal())));
		result = result && (((getNews() == null) && (that.getNews() == null)) || (getNews() != null && getNews().equals(that.getNews())));
		result = result && (((getNote() == null) && (that.getNote() == null)) || (getNote() != null && getNote().equals(that.getNote())));
		result = result && (((getOoc() == null) && (that.getOoc() == null)) || (getOoc() != null && getOoc().equals(that.getOoc())));
		result = result && (((getPenalty() == null) && (that.getPenalty() == null)) || (getPenalty() != null && getPenalty().equals(that.getPenalty())));
		result = result && (((getQuestion() == null) && (that.getQuestion() == null)) || (getQuestion() != null && getQuestion().equals(that.getQuestion())));
		return result;
	}
	
	

	
}
