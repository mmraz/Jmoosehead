package org.mraz.moose.dao.model.obj.moose;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.mraz.moose.dao.enums.subtype.moose.PlayerSubclassType;
import org.mraz.moose.dao.model.obj.moose.iface.IPlayerStats;


/** 
 * Object mapping for hibernate-handled table: player_stats.
 * @author autogenerated
 */

@Entity
@PrimaryKeyJoinColumn(name = "player_id")
@Table(name = "player_stats", catalog = "moose")
public class PlayerStats extends Player implements Cloneable, Serializable, IPojoGenEntity, IPlayerStats {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559033527L;

	

	/** Field mapping. */
	private Integer ac0;
	/** Field mapping. */
	private Integer ac1;
	/** Field mapping. */
	private Integer ac2;
	/** Field mapping. */
	private Integer ac3;
	/** Field mapping. */
	private Integer alignment;
	/** Field mapping. */
	private Long bank;
	/** Field mapping. */
	private Integer damroll;
	/** Field mapping. */
	private Long gold;
	/** Field mapping. */
	private Integer hitroll;
	/** Field mapping. */
	private Integer hp;
	/** Field mapping. */
	private Integer incognito;
	/** Field mapping. */
	private Integer invisible;
	/** Field mapping. */
	private Integer mana;
	/** Field mapping. */
	private Integer maxHp;
	/** Field mapping. */
	private Integer maxMana;
	/** Field mapping. */
	private Integer maxMove;
	/** Field mapping. */
	private Integer move;
	/** Field mapping. */
	private Integer practice;
	/** Field mapping. */
	private Integer savingThrow;
	/** Field mapping. */
	private Integer secondDamroll;
	/** Field mapping. */
	private Integer secondHitroll;
	/** Field mapping. */
	private Long silver;
	/** Field mapping. */
	private Integer skill;
	/** Field mapping. */
	private Integer training;
	/** Field mapping. */
	private Integer wimpy;
 

	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return PlayerSubclassType enum.
 	 */
 	@Transient
 	@Override
 	public PlayerSubclassType getPlayerSubclassType() {
		return PlayerSubclassType.PLAYER_STATS;
 	}  

 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Override
	@Transient
	public Class<?> getClassType() {
		return PlayerStats.class;
	}
 

    /**
     * Return the value associated with the column: ac0.
	 * @return A Integer object (this.ac0)
	 */
	@Column( nullable = false  )
	public Integer getAc0() {
		return this.ac0;
		
	}
	

  
    /**  
     * Set the value related to the column: ac0.
	 * @param ac0 the ac0 value you wish to set
	 */
	public void setAc0(final Integer ac0) {
		this.ac0 = ac0;
	}

    /**
     * Return the value associated with the column: ac1.
	 * @return A Integer object (this.ac1)
	 */
	@Column( nullable = false  )
	public Integer getAc1() {
		return this.ac1;
		
	}
	

  
    /**  
     * Set the value related to the column: ac1.
	 * @param ac1 the ac1 value you wish to set
	 */
	public void setAc1(final Integer ac1) {
		this.ac1 = ac1;
	}

    /**
     * Return the value associated with the column: ac2.
	 * @return A Integer object (this.ac2)
	 */
	@Column( nullable = false  )
	public Integer getAc2() {
		return this.ac2;
		
	}
	

  
    /**  
     * Set the value related to the column: ac2.
	 * @param ac2 the ac2 value you wish to set
	 */
	public void setAc2(final Integer ac2) {
		this.ac2 = ac2;
	}

    /**
     * Return the value associated with the column: ac3.
	 * @return A Integer object (this.ac3)
	 */
	@Column( nullable = false  )
	public Integer getAc3() {
		return this.ac3;
		
	}
	

  
    /**  
     * Set the value related to the column: ac3.
	 * @param ac3 the ac3 value you wish to set
	 */
	public void setAc3(final Integer ac3) {
		this.ac3 = ac3;
	}

    /**
     * Return the value associated with the column: alignment.
	 * @return A Integer object (this.alignment)
	 */
	@Column( nullable = false  )
	public Integer getAlignment() {
		return this.alignment;
		
	}
	

  
    /**  
     * Set the value related to the column: alignment.
	 * @param alignment the alignment value you wish to set
	 */
	public void setAlignment(final Integer alignment) {
		this.alignment = alignment;
	}

    /**
     * Return the value associated with the column: bank.
	 * @return A Long object (this.bank)
	 */
	@Column( nullable = false  )
	public Long getBank() {
		return this.bank;
		
	}
	

  
    /**  
     * Set the value related to the column: bank.
	 * @param bank the bank value you wish to set
	 */
	public void setBank(final Long bank) {
		this.bank = bank;
	}

    /**
     * Return the value associated with the column: damroll.
	 * @return A Integer object (this.damroll)
	 */
	@Column( nullable = false  )
	public Integer getDamroll() {
		return this.damroll;
		
	}
	

  
    /**  
     * Set the value related to the column: damroll.
	 * @param damroll the damroll value you wish to set
	 */
	public void setDamroll(final Integer damroll) {
		this.damroll = damroll;
	}

    /**
     * Return the value associated with the column: gold.
	 * @return A Long object (this.gold)
	 */
	@Column( nullable = false  )
	public Long getGold() {
		return this.gold;
		
	}
	

  
    /**  
     * Set the value related to the column: gold.
	 * @param gold the gold value you wish to set
	 */
	public void setGold(final Long gold) {
		this.gold = gold;
	}

    /**
     * Return the value associated with the column: hitroll.
	 * @return A Integer object (this.hitroll)
	 */
	@Column( nullable = false  )
	public Integer getHitroll() {
		return this.hitroll;
		
	}
	

  
    /**  
     * Set the value related to the column: hitroll.
	 * @param hitroll the hitroll value you wish to set
	 */
	public void setHitroll(final Integer hitroll) {
		this.hitroll = hitroll;
	}

    /**
     * Return the value associated with the column: hp.
	 * @return A Integer object (this.hp)
	 */
	@Column( nullable = false  )
	public Integer getHp() {
		return this.hp;
		
	}
	

  
    /**  
     * Set the value related to the column: hp.
	 * @param hp the hp value you wish to set
	 */
	public void setHp(final Integer hp) {
		this.hp = hp;
	}

    /**
     * Return the value associated with the column: incognito.
	 * @return A Integer object (this.incognito)
	 */
	@Column( nullable = false  )
	public Integer getIncognito() {
		return this.incognito;
		
	}
	

  
    /**  
     * Set the value related to the column: incognito.
	 * @param incognito the incognito value you wish to set
	 */
	public void setIncognito(final Integer incognito) {
		this.incognito = incognito;
	}

    /**
     * Return the value associated with the column: invisible.
	 * @return A Integer object (this.invisible)
	 */
	@Column( nullable = false  )
	public Integer getInvisible() {
		return this.invisible;
		
	}
	

  
    /**  
     * Set the value related to the column: invisible.
	 * @param invisible the invisible value you wish to set
	 */
	public void setInvisible(final Integer invisible) {
		this.invisible = invisible;
	}

    /**
     * Return the value associated with the column: mana.
	 * @return A Integer object (this.mana)
	 */
	@Column( nullable = false  )
	public Integer getMana() {
		return this.mana;
		
	}
	

  
    /**  
     * Set the value related to the column: mana.
	 * @param mana the mana value you wish to set
	 */
	public void setMana(final Integer mana) {
		this.mana = mana;
	}

    /**
     * Return the value associated with the column: maxHp.
	 * @return A Integer object (this.maxHp)
	 */
	@Column( name = "max_hp", nullable = false  )
	public Integer getMaxHp() {
		return this.maxHp;
		
	}
	

  
    /**  
     * Set the value related to the column: maxHp.
	 * @param maxHp the maxHp value you wish to set
	 */
	public void setMaxHp(final Integer maxHp) {
		this.maxHp = maxHp;
	}

    /**
     * Return the value associated with the column: maxMana.
	 * @return A Integer object (this.maxMana)
	 */
	@Column( name = "max_mana", nullable = false  )
	public Integer getMaxMana() {
		return this.maxMana;
		
	}
	

  
    /**  
     * Set the value related to the column: maxMana.
	 * @param maxMana the maxMana value you wish to set
	 */
	public void setMaxMana(final Integer maxMana) {
		this.maxMana = maxMana;
	}

    /**
     * Return the value associated with the column: maxMove.
	 * @return A Integer object (this.maxMove)
	 */
	@Column( name = "max_move", nullable = false  )
	public Integer getMaxMove() {
		return this.maxMove;
		
	}
	

  
    /**  
     * Set the value related to the column: maxMove.
	 * @param maxMove the maxMove value you wish to set
	 */
	public void setMaxMove(final Integer maxMove) {
		this.maxMove = maxMove;
	}

    /**
     * Return the value associated with the column: move.
	 * @return A Integer object (this.move)
	 */
	@Column( nullable = false  )
	public Integer getMove() {
		return this.move;
		
	}
	

  
    /**  
     * Set the value related to the column: move.
	 * @param move the move value you wish to set
	 */
	public void setMove(final Integer move) {
		this.move = move;
	}

    /**
     * Return the value associated with the column: practice.
	 * @return A Integer object (this.practice)
	 */
	@Column( nullable = false  )
	public Integer getPractice() {
		return this.practice;
		
	}
	

  
    /**  
     * Set the value related to the column: practice.
	 * @param practice the practice value you wish to set
	 */
	public void setPractice(final Integer practice) {
		this.practice = practice;
	}

    /**
     * Return the value associated with the column: savingThrow.
	 * @return A Integer object (this.savingThrow)
	 */
	@Column( name = "saving_throw", nullable = false  )
	public Integer getSavingThrow() {
		return this.savingThrow;
		
	}
	

  
    /**  
     * Set the value related to the column: savingThrow.
	 * @param savingThrow the savingThrow value you wish to set
	 */
	public void setSavingThrow(final Integer savingThrow) {
		this.savingThrow = savingThrow;
	}

    /**
     * Return the value associated with the column: secondDamroll.
	 * @return A Integer object (this.secondDamroll)
	 */
	@Column( name = "second_damroll", nullable = false  )
	public Integer getSecondDamroll() {
		return this.secondDamroll;
		
	}
	

  
    /**  
     * Set the value related to the column: secondDamroll.
	 * @param secondDamroll the secondDamroll value you wish to set
	 */
	public void setSecondDamroll(final Integer secondDamroll) {
		this.secondDamroll = secondDamroll;
	}

    /**
     * Return the value associated with the column: secondHitroll.
	 * @return A Integer object (this.secondHitroll)
	 */
	@Column( name = "second_hitroll", nullable = false  )
	public Integer getSecondHitroll() {
		return this.secondHitroll;
		
	}
	

  
    /**  
     * Set the value related to the column: secondHitroll.
	 * @param secondHitroll the secondHitroll value you wish to set
	 */
	public void setSecondHitroll(final Integer secondHitroll) {
		this.secondHitroll = secondHitroll;
	}

    /**
     * Return the value associated with the column: silver.
	 * @return A Long object (this.silver)
	 */
	@Column( nullable = false  )
	public Long getSilver() {
		return this.silver;
		
	}
	

  
    /**  
     * Set the value related to the column: silver.
	 * @param silver the silver value you wish to set
	 */
	public void setSilver(final Long silver) {
		this.silver = silver;
	}

    /**
     * Return the value associated with the column: skill.
	 * @return A Integer object (this.skill)
	 */
	@Column( nullable = false  )
	public Integer getSkill() {
		return this.skill;
		
	}
	

  
    /**  
     * Set the value related to the column: skill.
	 * @param skill the skill value you wish to set
	 */
	public void setSkill(final Integer skill) {
		this.skill = skill;
	}

    /**
     * Return the value associated with the column: training.
	 * @return A Integer object (this.training)
	 */
	@Column( nullable = false  )
	public Integer getTraining() {
		return this.training;
		
	}
	

  
    /**  
     * Set the value related to the column: training.
	 * @param training the training value you wish to set
	 */
	public void setTraining(final Integer training) {
		this.training = training;
	}

    /**
     * Return the value associated with the column: wimpy.
	 * @return A Integer object (this.wimpy)
	 */
	@Column( nullable = false  )
	public Integer getWimpy() {
		return this.wimpy;
		
	}
	

  
    /**  
     * Set the value related to the column: wimpy.
	 * @param wimpy the wimpy value you wish to set
	 */
	public void setWimpy(final Integer wimpy) {
		this.wimpy = wimpy;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public PlayerStats clone() throws CloneNotSupportedException {
		
        final PlayerStats copy = (PlayerStats)super.clone();

		copy.setAc0(this.getAc0());
		copy.setAc1(this.getAc1());
		copy.setAc2(this.getAc2());
		copy.setAc3(this.getAc3());
		copy.setAlignment(this.getAlignment());
		copy.setBank(this.getBank());
		copy.setDamroll(this.getDamroll());
		copy.setGold(this.getGold());
		copy.setHitroll(this.getHitroll());
		copy.setHp(this.getHp());
		copy.setIncognito(this.getIncognito());
		copy.setInvisible(this.getInvisible());
		copy.setMana(this.getMana());
		copy.setMaxHp(this.getMaxHp());
		copy.setMaxMana(this.getMaxMana());
		copy.setMaxMove(this.getMaxMove());
		copy.setMove(this.getMove());
		copy.setPractice(this.getPractice());
		copy.setSavingThrow(this.getSavingThrow());
		copy.setSecondDamroll(this.getSecondDamroll());
		copy.setSecondHitroll(this.getSecondHitroll());
		copy.setSilver(this.getSilver());
		copy.setSkill(this.getSkill());
		copy.setTraining(this.getTraining());
		copy.setWimpy(this.getWimpy());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("ac0: " + this.getAc0() + ", ");
		sb.append("ac1: " + this.getAc1() + ", ");
		sb.append("ac2: " + this.getAc2() + ", ");
		sb.append("ac3: " + this.getAc3() + ", ");
		sb.append("alignment: " + this.getAlignment() + ", ");
		sb.append("bank: " + this.getBank() + ", ");
		sb.append("damroll: " + this.getDamroll() + ", ");
		sb.append("gold: " + this.getGold() + ", ");
		sb.append("hitroll: " + this.getHitroll() + ", ");
		sb.append("hp: " + this.getHp() + ", ");
		sb.append("incognito: " + this.getIncognito() + ", ");
		sb.append("invisible: " + this.getInvisible() + ", ");
		sb.append("mana: " + this.getMana() + ", ");
		sb.append("maxHp: " + this.getMaxHp() + ", ");
		sb.append("maxMana: " + this.getMaxMana() + ", ");
		sb.append("maxMove: " + this.getMaxMove() + ", ");
		sb.append("move: " + this.getMove() + ", ");
		sb.append("practice: " + this.getPractice() + ", ");
		sb.append("savingThrow: " + this.getSavingThrow() + ", ");
		sb.append("secondDamroll: " + this.getSecondDamroll() + ", ");
		sb.append("secondHitroll: " + this.getSecondHitroll() + ", ");
		sb.append("silver: " + this.getSilver() + ", ");
		sb.append("skill: " + this.getSkill() + ", ");
		sb.append("training: " + this.getTraining() + ", ");
		sb.append("wimpy: " + this.getWimpy());
		if (this.getClass().getSuperclass() != this.getClass()) {
			sb.append("(super.toString=" + super.toString() + ")");
		}
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final PlayerStats that; 
		try {
			that = (PlayerStats) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		if (this.getClass().getSuperclass() != this.getClass()) {
			result = super.equals(that);
		}
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAc0() == null) && (that.getAc0() == null)) || (getAc0() != null && getAc0().equals(that.getAc0())));
		result = result && (((getAc1() == null) && (that.getAc1() == null)) || (getAc1() != null && getAc1().equals(that.getAc1())));
		result = result && (((getAc2() == null) && (that.getAc2() == null)) || (getAc2() != null && getAc2().equals(that.getAc2())));
		result = result && (((getAc3() == null) && (that.getAc3() == null)) || (getAc3() != null && getAc3().equals(that.getAc3())));
		result = result && (((getAlignment() == null) && (that.getAlignment() == null)) || (getAlignment() != null && getAlignment().equals(that.getAlignment())));
		result = result && (((getBank() == null) && (that.getBank() == null)) || (getBank() != null && getBank().equals(that.getBank())));
		result = result && (((getDamroll() == null) && (that.getDamroll() == null)) || (getDamroll() != null && getDamroll().equals(that.getDamroll())));
		result = result && (((getGold() == null) && (that.getGold() == null)) || (getGold() != null && getGold().equals(that.getGold())));
		result = result && (((getHitroll() == null) && (that.getHitroll() == null)) || (getHitroll() != null && getHitroll().equals(that.getHitroll())));
		result = result && (((getHp() == null) && (that.getHp() == null)) || (getHp() != null && getHp().equals(that.getHp())));
		result = result && (((getIncognito() == null) && (that.getIncognito() == null)) || (getIncognito() != null && getIncognito().equals(that.getIncognito())));
		result = result && (((getInvisible() == null) && (that.getInvisible() == null)) || (getInvisible() != null && getInvisible().equals(that.getInvisible())));
		result = result && (((getMana() == null) && (that.getMana() == null)) || (getMana() != null && getMana().equals(that.getMana())));
		result = result && (((getMaxHp() == null) && (that.getMaxHp() == null)) || (getMaxHp() != null && getMaxHp().equals(that.getMaxHp())));
		result = result && (((getMaxMana() == null) && (that.getMaxMana() == null)) || (getMaxMana() != null && getMaxMana().equals(that.getMaxMana())));
		result = result && (((getMaxMove() == null) && (that.getMaxMove() == null)) || (getMaxMove() != null && getMaxMove().equals(that.getMaxMove())));
		result = result && (((getMove() == null) && (that.getMove() == null)) || (getMove() != null && getMove().equals(that.getMove())));
		result = result && (((getPractice() == null) && (that.getPractice() == null)) || (getPractice() != null && getPractice().equals(that.getPractice())));
		result = result && (((getSavingThrow() == null) && (that.getSavingThrow() == null)) || (getSavingThrow() != null && getSavingThrow().equals(that.getSavingThrow())));
		result = result && (((getSecondDamroll() == null) && (that.getSecondDamroll() == null)) || (getSecondDamroll() != null && getSecondDamroll().equals(that.getSecondDamroll())));
		result = result && (((getSecondHitroll() == null) && (that.getSecondHitroll() == null)) || (getSecondHitroll() != null && getSecondHitroll().equals(that.getSecondHitroll())));
		result = result && (((getSilver() == null) && (that.getSilver() == null)) || (getSilver() != null && getSilver().equals(that.getSilver())));
		result = result && (((getSkill() == null) && (that.getSkill() == null)) || (getSkill() != null && getSkill().equals(that.getSkill())));
		result = result && (((getTraining() == null) && (that.getTraining() == null)) || (getTraining() != null && getTraining().equals(that.getTraining())));
		result = result && (((getWimpy() == null) && (that.getWimpy() == null)) || (getWimpy() != null && getWimpy().equals(that.getWimpy())));
		return result;
	}
	
	

	
}
