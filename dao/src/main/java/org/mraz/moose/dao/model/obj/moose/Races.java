package org.mraz.moose.dao.model.obj.moose;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.mraz.moose.dao.model.obj.moose.iface.IRaces;


/** 
 * Object mapping for hibernate-handled table: races.
 * @author autogenerated
 */

@Entity
@Table(name = "races", catalog = "moose")
public class Races implements Cloneable, Serializable, IPojoGenEntity, IRaces {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559033526L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Long> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Long>());
	
	/** hashCode temporary storage. */
	private volatile Long hashCode;
	

	/** Field mapping. */
	private Long id = 0L; // init for hibernate bug workaround
	/** Field mapping. */
	private String name;
	/** Field mapping. */
	private Integer statAgt;
	/** Field mapping. */
	private Integer statCon;
	/** Field mapping. */
	private Integer statDex;
	/** Field mapping. */
	private Integer statEnd;
	/** Field mapping. */
	private Integer statInt;
	/** Field mapping. */
	private Integer statSoc;
	/** Field mapping. */
	private Integer statStr;
	/** Field mapping. */
	private Integer statWis;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Races() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Races(Long id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id Long object;
	 * @param name String object;
	 * @param statAgt Integer object;
	 * @param statCon Integer object;
	 * @param statDex Integer object;
	 * @param statEnd Integer object;
	 * @param statInt Integer object;
	 * @param statSoc Integer object;
	 * @param statStr Integer object;
	 * @param statWis Integer object;
	 */
	public Races(Long id, String name, Integer statAgt, 					
			Integer statCon, Integer statDex, Integer statEnd, 					
			Integer statInt, Integer statSoc, Integer statStr, 					
			Integer statWis) {

		this.id = id;
		this.name = name;
		this.statAgt = statAgt;
		this.statCon = statCon;
		this.statDex = statDex;
		this.statEnd = statEnd;
		this.statInt = statInt;
		this.statSoc = statSoc;
		this.statStr = statStr;
		this.statWis = statWis;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Races.class;
	}
 

    /**
     * Return the value associated with the column: id.
	 * @return A Long object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column( name = "race_id", nullable = false  )
	public Long getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Long id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0L) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: name.
	 * @return A String object (this.name)
	 */
	@Column( nullable = false, length = 20  )
	public String getName() {
		return this.name;
		
	}
	

  
    /**  
     * Set the value related to the column: name.
	 * @param name the name value you wish to set
	 */
	public void setName(final String name) {
		this.name = name;
	}

    /**
     * Return the value associated with the column: statAgt.
	 * @return A Integer object (this.statAgt)
	 */
	@Column( name = "stat_agt", nullable = false  )
	public Integer getStatAgt() {
		return this.statAgt;
		
	}
	

  
    /**  
     * Set the value related to the column: statAgt.
	 * @param statAgt the statAgt value you wish to set
	 */
	public void setStatAgt(final Integer statAgt) {
		this.statAgt = statAgt;
	}

    /**
     * Return the value associated with the column: statCon.
	 * @return A Integer object (this.statCon)
	 */
	@Column( name = "stat_con", nullable = false  )
	public Integer getStatCon() {
		return this.statCon;
		
	}
	

  
    /**  
     * Set the value related to the column: statCon.
	 * @param statCon the statCon value you wish to set
	 */
	public void setStatCon(final Integer statCon) {
		this.statCon = statCon;
	}

    /**
     * Return the value associated with the column: statDex.
	 * @return A Integer object (this.statDex)
	 */
	@Column( name = "stat_dex", nullable = false  )
	public Integer getStatDex() {
		return this.statDex;
		
	}
	

  
    /**  
     * Set the value related to the column: statDex.
	 * @param statDex the statDex value you wish to set
	 */
	public void setStatDex(final Integer statDex) {
		this.statDex = statDex;
	}

    /**
     * Return the value associated with the column: statEnd.
	 * @return A Integer object (this.statEnd)
	 */
	@Column( name = "stat_end", nullable = false  )
	public Integer getStatEnd() {
		return this.statEnd;
		
	}
	

  
    /**  
     * Set the value related to the column: statEnd.
	 * @param statEnd the statEnd value you wish to set
	 */
	public void setStatEnd(final Integer statEnd) {
		this.statEnd = statEnd;
	}

    /**
     * Return the value associated with the column: statInt.
	 * @return A Integer object (this.statInt)
	 */
	@Column( name = "stat_int", nullable = false  )
	public Integer getStatInt() {
		return this.statInt;
		
	}
	

  
    /**  
     * Set the value related to the column: statInt.
	 * @param statInt the statInt value you wish to set
	 */
	public void setStatInt(final Integer statInt) {
		this.statInt = statInt;
	}

    /**
     * Return the value associated with the column: statSoc.
	 * @return A Integer object (this.statSoc)
	 */
	@Column( name = "stat_soc", nullable = false  )
	public Integer getStatSoc() {
		return this.statSoc;
		
	}
	

  
    /**  
     * Set the value related to the column: statSoc.
	 * @param statSoc the statSoc value you wish to set
	 */
	public void setStatSoc(final Integer statSoc) {
		this.statSoc = statSoc;
	}

    /**
     * Return the value associated with the column: statStr.
	 * @return A Integer object (this.statStr)
	 */
	@Column( name = "stat_str", nullable = false  )
	public Integer getStatStr() {
		return this.statStr;
		
	}
	

  
    /**  
     * Set the value related to the column: statStr.
	 * @param statStr the statStr value you wish to set
	 */
	public void setStatStr(final Integer statStr) {
		this.statStr = statStr;
	}

    /**
     * Return the value associated with the column: statWis.
	 * @return A Integer object (this.statWis)
	 */
	@Column( name = "stat_wis", nullable = false  )
	public Integer getStatWis() {
		return this.statWis;
		
	}
	

  
    /**  
     * Set the value related to the column: statWis.
	 * @param statWis the statWis value you wish to set
	 */
	public void setStatWis(final Integer statWis) {
		this.statWis = statWis;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Races clone() throws CloneNotSupportedException {
		
        final Races copy = (Races)super.clone();

		copy.setId(this.getId());
		copy.setName(this.getName());
		copy.setStatAgt(this.getStatAgt());
		copy.setStatCon(this.getStatCon());
		copy.setStatDex(this.getStatDex());
		copy.setStatEnd(this.getStatEnd());
		copy.setStatInt(this.getStatInt());
		copy.setStatSoc(this.getStatSoc());
		copy.setStatStr(this.getStatStr());
		copy.setStatWis(this.getStatWis());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("name: " + this.getName() + ", ");
		sb.append("statAgt: " + this.getStatAgt() + ", ");
		sb.append("statCon: " + this.getStatCon() + ", ");
		sb.append("statDex: " + this.getStatDex() + ", ");
		sb.append("statEnd: " + this.getStatEnd() + ", ");
		sb.append("statInt: " + this.getStatInt() + ", ");
		sb.append("statSoc: " + this.getStatSoc() + ", ");
		sb.append("statStr: " + this.getStatStr() + ", ");
		sb.append("statWis: " + this.getStatWis());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Races that; 
		try {
			that = (Races) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getName() == null) && (that.getName() == null)) || (getName() != null && getName().equals(that.getName())));
		result = result && (((getStatAgt() == null) && (that.getStatAgt() == null)) || (getStatAgt() != null && getStatAgt().equals(that.getStatAgt())));
		result = result && (((getStatCon() == null) && (that.getStatCon() == null)) || (getStatCon() != null && getStatCon().equals(that.getStatCon())));
		result = result && (((getStatDex() == null) && (that.getStatDex() == null)) || (getStatDex() != null && getStatDex().equals(that.getStatDex())));
		result = result && (((getStatEnd() == null) && (that.getStatEnd() == null)) || (getStatEnd() != null && getStatEnd().equals(that.getStatEnd())));
		result = result && (((getStatInt() == null) && (that.getStatInt() == null)) || (getStatInt() != null && getStatInt().equals(that.getStatInt())));
		result = result && (((getStatSoc() == null) && (that.getStatSoc() == null)) || (getStatSoc() != null && getStatSoc().equals(that.getStatSoc())));
		result = result && (((getStatStr() == null) && (that.getStatStr() == null)) || (getStatStr() != null && getStatStr().equals(that.getStatStr())));
		result = result && (((getStatWis() == null) && (that.getStatWis() == null)) || (getStatWis() != null && getStatWis().equals(that.getStatWis())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Long newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0L) {
							newHashCode = getId();
						} else {
							newHashCode = (long) super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
		return (int) (this.hashCode & 0xffffff);
	}
	

	
}
