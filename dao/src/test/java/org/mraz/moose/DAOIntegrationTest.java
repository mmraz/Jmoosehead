package org.mraz.moose;

import org.junit.Assert;
import org.junit.Test;


import org.mraz.moose.dao.factories.moose.*;
import org.mraz.moose.dao.model.obj.moose.*;
import org.mraz.moose.dao.services.data.DataLayerMoose;
import org.mraz.moose.dao.services.data.DataLayerMooseImpl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@ContextConfiguration(locations = { "/applicationContext.xml" } )
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateMooseDaoFactory.getPlayerSkillsDao().getQuery("delete from PlayerSkills").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getGroupSkillsDao().getQuery("delete from GroupSkills").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getAliasesDao().getQuery("delete from Aliases").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getSkillSpellDao().getQuery("delete from SkillSpell").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getRacesDao().getQuery("delete from Races").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerStatsDao().getQuery("delete from PlayerStats").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerNotesDao().getQuery("delete from PlayerNotes").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerLastsDao().getQuery("delete from PlayerLasts").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerGroupDao().getQuery("delete from PlayerGroup").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerGladiatorDao().getQuery("delete from PlayerGladiator").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerDeityDao().getQuery("delete from PlayerDeity").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerDao().getQuery("delete from Player").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getGroupDao().getQuery("delete from Group").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getDeityDao().getQuery("delete from Deity").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getClansDao().getQuery("delete from Clans").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getAttributesDao().getQuery("delete from Attributes").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}
	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFinalPass() {
	
		HibernateMooseDaoFactory.getPlayerSkillsDao().getQuery("delete from PlayerSkills").executeUpdate();
		HibernateMooseDaoFactory.getGroupSkillsDao().getQuery("delete from GroupSkills").executeUpdate();
		HibernateMooseDaoFactory.getAliasesDao().getQuery("delete from Aliases").executeUpdate();
		HibernateMooseDaoFactory.getSkillSpellDao().getQuery("delete from SkillSpell").executeUpdate();
		HibernateMooseDaoFactory.getRacesDao().getQuery("delete from Races").executeUpdate();
		HibernateMooseDaoFactory.getPlayerStatsDao().getQuery("delete from PlayerStats").executeUpdate();
		HibernateMooseDaoFactory.getPlayerNotesDao().getQuery("delete from PlayerNotes").executeUpdate();
		HibernateMooseDaoFactory.getPlayerLastsDao().getQuery("delete from PlayerLasts").executeUpdate();
		HibernateMooseDaoFactory.getPlayerGroupDao().getQuery("delete from PlayerGroup").executeUpdate();
		HibernateMooseDaoFactory.getPlayerGladiatorDao().getQuery("delete from PlayerGladiator").executeUpdate();
		HibernateMooseDaoFactory.getPlayerDeityDao().getQuery("delete from PlayerDeity").executeUpdate();
		HibernateMooseDaoFactory.getPlayerDao().getQuery("delete from Player").executeUpdate();
		HibernateMooseDaoFactory.getGroupDao().getQuery("delete from Group").executeUpdate();
		HibernateMooseDaoFactory.getDeityDao().getQuery("delete from Deity").executeUpdate();
		HibernateMooseDaoFactory.getClansDao().getQuery("delete from Clans").executeUpdate();
		HibernateMooseDaoFactory.getAttributesDao().getQuery("delete from Attributes").executeUpdate();


		
	}

	
	/**
	 * Hibernate test case for table: moose.aliases.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testAliases() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		Aliases aliases = MooseDataPoolFactory.getAliases();
		dataLayerMoose.saveOrUpdate(aliases);

		Date aliasesId = aliases.getId();
		Aliases copy = aliases.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(aliases); 		 

		aliases = dataLayerMoose.getAliases(aliasesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getBamfIn(), aliases.getBamfIn());
		Assert.assertEquals(copy.getBamfOut(), aliases.getBamfOut());
		Assert.assertEquals(copy.getClanId(), aliases.getClanId());
		Assert.assertEquals(copy.getDescription(), aliases.getDescription());
		Assert.assertEquals(copy.getEmail(), aliases.getEmail());
		Assert.assertEquals(copy.getGender(), aliases.getGender());
		Assert.assertEquals(copy.getId().getTime() / 1000, aliases.getId().getTime() / 1000);
		Assert.assertEquals(copy.getLevel(), aliases.getLevel());
		Assert.assertEquals(copy.getLongDesc(), aliases.getLongDesc());
		Assert.assertEquals(copy.getName(), aliases.getName());
		Assert.assertEquals(copy.getPassword(), aliases.getPassword());
		Assert.assertEquals(copy.getPlayed(), aliases.getPlayed());
		Assert.assertEquals(copy.getRaceId(), aliases.getRaceId());
		Assert.assertEquals(copy.getShortDesc(), aliases.getShortDesc());
		Assert.assertEquals(copy.getSurname(), aliases.getSurname());
		Assert.assertEquals(copy.getTitle(), aliases.getTitle());
		Assert.assertEquals(copy.getTrueGender(), aliases.getTrueGender());
		Assert.assertEquals(copy.getTrust(), aliases.getTrust());
		Assert.assertEquals(copy.getValue(), aliases.getValue());
		Assert.assertEquals(copy.getVersion(), aliases.getVersion());
		Assert.assertEquals(copy.getWhoname(), aliases.getWhoname());
		// tests for coverage completeness
		Assert.assertFalse(aliases.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(aliases.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.attributes.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testAttributes() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		Attributes attributes = MooseDataPoolFactory.getAttributes();
		dataLayerMoose.saveOrUpdate(attributes);

		Long attributesId = attributes.getId();
		Attributes copy = attributes.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(attributes); 		 

		attributes = dataLayerMoose.getAttributes(attributesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAgility(), attributes.getAgility());
		Assert.assertEquals(copy.getConstitution(), attributes.getConstitution());
		Assert.assertEquals(copy.getDexterity(), attributes.getDexterity());
		Assert.assertEquals(copy.getEndurance(), attributes.getEndurance());
		Assert.assertEquals(copy.getIntelligence(), attributes.getIntelligence());
		Assert.assertEquals(copy.isIsModifier(), attributes.isIsModifier());
		Assert.assertEquals(copy.getSocial(), attributes.getSocial());
		Assert.assertEquals(copy.getStrength(), attributes.getStrength());
		Assert.assertEquals(copy.getWisdom(), attributes.getWisdom());
		// tests for coverage completeness
		Assert.assertFalse(attributes.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(attributes.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.clans.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testClans() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		Clans clans = MooseDataPoolFactory.getClans();
		dataLayerMoose.saveOrUpdate(clans);

		Long clansId = clans.getId();
		Clans copy = clans.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(clans); 		 

		clans = dataLayerMoose.getClans(clansId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getHallVnum(), clans.getHallVnum());
		Assert.assertEquals(copy.isHidden(), clans.isHidden());
		Assert.assertEquals(copy.isIndependent(), clans.isIndependent());
		Assert.assertEquals(copy.getName(), clans.getName());
		Assert.assertEquals(copy.isPvp(), clans.isPvp());
		Assert.assertEquals(copy.getWhoName(), clans.getWhoName());
		// tests for coverage completeness
		Assert.assertFalse(clans.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(clans.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.deity.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testDeity() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		Deity deity = MooseDataPoolFactory.getDeity();
		dataLayerMoose.saveOrUpdate(deity);

		Long deityId = deity.getId();
		Deity copy = deity.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(deity); 		 

		deity = dataLayerMoose.getDeity(deityId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getName(), deity.getName());
		// tests for coverage completeness
		Assert.assertFalse(deity.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(deity.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.group.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testGroup() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		Group group = MooseDataPoolFactory.getGroup();
		dataLayerMoose.saveOrUpdate(group);

		Long groupId = group.getId();
		Group copy = group.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(group); 		 

		group = dataLayerMoose.getGroup(groupId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getName(), group.getName());
		// tests for coverage completeness
		Assert.assertFalse(group.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(group.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.group_skills.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testGroupSkills() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		GroupSkills groupSkills = MooseDataPoolFactory.getGroupSkills();
		dataLayerMoose.saveOrUpdate(groupSkills);

		Long groupSkillsId = groupSkills.getId();
		GroupSkills copy = groupSkills.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(groupSkills); 		 

		groupSkills = dataLayerMoose.getGroupSkills(groupSkillsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getName(), groupSkills.getName());
		Assert.assertEquals(copy.getSn().getId(), groupSkills.getSn().getId());
		// tests for coverage completeness
		Assert.assertFalse(groupSkills.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(groupSkills.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.player.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPlayer() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		Player player = MooseDataPoolFactory.getPlayer();
		dataLayerMoose.saveOrUpdate(player);

		Date playerId = player.getId();
		Player copy = player.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(player); 		 

		player = dataLayerMoose.getPlayer(playerId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getBamfIn(), player.getBamfIn());
		Assert.assertEquals(copy.getBamfOut(), player.getBamfOut());
		Assert.assertEquals(copy.getClanId(), player.getClanId());
		Assert.assertEquals(copy.getDescription(), player.getDescription());
		Assert.assertEquals(copy.getEmail(), player.getEmail());
		Assert.assertEquals(copy.getGender(), player.getGender());
		Assert.assertEquals(copy.getId().getTime() / 1000, player.getId().getTime() / 1000);
		Assert.assertEquals(copy.getLevel(), player.getLevel());
		Assert.assertEquals(copy.getLongDesc(), player.getLongDesc());
		Assert.assertEquals(copy.getName(), player.getName());
		Assert.assertEquals(copy.getPassword(), player.getPassword());
		Assert.assertEquals(copy.getPlayed(), player.getPlayed());
		Assert.assertEquals(copy.getRaceId(), player.getRaceId());
		Assert.assertEquals(copy.getShortDesc(), player.getShortDesc());
		Assert.assertEquals(copy.getSurname(), player.getSurname());
		Assert.assertEquals(copy.getTitle(), player.getTitle());
		Assert.assertEquals(copy.getTrueGender(), player.getTrueGender());
		Assert.assertEquals(copy.getTrust(), player.getTrust());
		Assert.assertEquals(copy.getVersion(), player.getVersion());
		Assert.assertEquals(copy.getWhoname(), player.getWhoname());
		// tests for coverage completeness
		Assert.assertFalse(player.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(player.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.player_deity.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPlayerDeity() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		PlayerDeity playerDeity = MooseDataPoolFactory.getPlayerDeity();
		dataLayerMoose.saveOrUpdate(playerDeity);

		Date playerDeityId = playerDeity.getId();
		PlayerDeity copy = playerDeity.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(playerDeity); 		 

		playerDeity = dataLayerMoose.getPlayerDeity(playerDeityId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getBamfIn(), playerDeity.getBamfIn());
		Assert.assertEquals(copy.getBamfOut(), playerDeity.getBamfOut());
		Assert.assertEquals(copy.getClanId(), playerDeity.getClanId());
		Assert.assertEquals(copy.getDeity().getId(), playerDeity.getDeity().getId());
		Assert.assertEquals(copy.getDescription(), playerDeity.getDescription());
		Assert.assertEquals(copy.getEmail(), playerDeity.getEmail());
		Assert.assertEquals(copy.getGender(), playerDeity.getGender());
		Assert.assertEquals(copy.getId().getTime() / 1000, playerDeity.getId().getTime() / 1000);
		Assert.assertEquals(copy.getLevel(), playerDeity.getLevel());
		Assert.assertEquals(copy.getLongDesc(), playerDeity.getLongDesc());
		Assert.assertEquals(copy.getName(), playerDeity.getName());
		Assert.assertEquals(copy.getPassword(), playerDeity.getPassword());
		Assert.assertEquals(copy.getPlayed(), playerDeity.getPlayed());
		Assert.assertEquals(copy.getRaceId(), playerDeity.getRaceId());
		Assert.assertEquals(copy.getSacrificeCnt(), playerDeity.getSacrificeCnt());
		Assert.assertEquals(copy.getShortDesc(), playerDeity.getShortDesc());
		Assert.assertEquals(copy.getSurname(), playerDeity.getSurname());
		Assert.assertEquals(copy.getSwitchedTo().getTime() / 1000, playerDeity.getSwitchedTo().getTime() / 1000);
		Assert.assertEquals(copy.getTitle(), playerDeity.getTitle());
		Assert.assertEquals(copy.getTrueGender(), playerDeity.getTrueGender());
		Assert.assertEquals(copy.getTrust(), playerDeity.getTrust());
		Assert.assertEquals(copy.getVersion(), playerDeity.getVersion());
		Assert.assertEquals(copy.getWhoname(), playerDeity.getWhoname());
		// tests for coverage completeness
		Assert.assertFalse(playerDeity.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(playerDeity.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.player_gladiator.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPlayerGladiator() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		PlayerGladiator playerGladiator = MooseDataPoolFactory.getPlayerGladiator();
		dataLayerMoose.saveOrUpdate(playerGladiator);

		Date playerGladiatorId = playerGladiator.getId();
		PlayerGladiator copy = playerGladiator.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(playerGladiator); 		 

		playerGladiator = dataLayerMoose.getPlayerGladiator(playerGladiatorId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getBamfIn(), playerGladiator.getBamfIn());
		Assert.assertEquals(copy.getBamfOut(), playerGladiator.getBamfOut());
		Assert.assertEquals(copy.getClanId(), playerGladiator.getClanId());
		Assert.assertEquals(copy.getDescription(), playerGladiator.getDescription());
		Assert.assertEquals(copy.getEmail(), playerGladiator.getEmail());
		Assert.assertEquals(copy.getGames(), playerGladiator.getGames());
		Assert.assertEquals(copy.getGender(), playerGladiator.getGender());
		Assert.assertEquals(copy.getId().getTime() / 1000, playerGladiator.getId().getTime() / 1000);
		Assert.assertEquals(copy.getKills(), playerGladiator.getKills());
		Assert.assertEquals(copy.getLevel(), playerGladiator.getLevel());
		Assert.assertEquals(copy.getLongDesc(), playerGladiator.getLongDesc());
		Assert.assertEquals(copy.getName(), playerGladiator.getName());
		Assert.assertEquals(copy.getPassword(), playerGladiator.getPassword());
		Assert.assertEquals(copy.getPlayed(), playerGladiator.getPlayed());
		Assert.assertEquals(copy.getRaceId(), playerGladiator.getRaceId());
		Assert.assertEquals(copy.getShortDesc(), playerGladiator.getShortDesc());
		Assert.assertEquals(copy.getSurname(), playerGladiator.getSurname());
		Assert.assertEquals(copy.getTeamGames(), playerGladiator.getTeamGames());
		Assert.assertEquals(copy.getTeamKills(), playerGladiator.getTeamKills());
		Assert.assertEquals(copy.getTeamWins(), playerGladiator.getTeamWins());
		Assert.assertEquals(copy.getTitle(), playerGladiator.getTitle());
		Assert.assertEquals(copy.getTrueGender(), playerGladiator.getTrueGender());
		Assert.assertEquals(copy.getTrust(), playerGladiator.getTrust());
		Assert.assertEquals(copy.getVersion(), playerGladiator.getVersion());
		Assert.assertEquals(copy.getWhoname(), playerGladiator.getWhoname());
		Assert.assertEquals(copy.getWins(), playerGladiator.getWins());
		// tests for coverage completeness
		Assert.assertFalse(playerGladiator.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(playerGladiator.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.player_group.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPlayerGroup() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		PlayerGroup playerGroup = MooseDataPoolFactory.getPlayerGroup();
		dataLayerMoose.saveOrUpdate(playerGroup);

		Date playerGroupId = playerGroup.getId();
		PlayerGroup copy = playerGroup.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(playerGroup); 		 

		playerGroup = dataLayerMoose.getPlayerGroup(playerGroupId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getBamfIn(), playerGroup.getBamfIn());
		Assert.assertEquals(copy.getBamfOut(), playerGroup.getBamfOut());
		Assert.assertEquals(copy.getClanId(), playerGroup.getClanId());
		Assert.assertEquals(copy.getDescription(), playerGroup.getDescription());
		Assert.assertEquals(copy.getEmail(), playerGroup.getEmail());
		Assert.assertEquals(copy.getGender(), playerGroup.getGender());
		Assert.assertEquals(copy.getId().getTime() / 1000, playerGroup.getId().getTime() / 1000);
		Assert.assertEquals(copy.getLevel(), playerGroup.getLevel());
		Assert.assertEquals(copy.getLongDesc(), playerGroup.getLongDesc());
		Assert.assertEquals(copy.getName(), playerGroup.getName());
		Assert.assertEquals(copy.getPassword(), playerGroup.getPassword());
		Assert.assertEquals(copy.getPlayed(), playerGroup.getPlayed());
		Assert.assertEquals(copy.getRaceId(), playerGroup.getRaceId());
		Assert.assertEquals(copy.getShortDesc(), playerGroup.getShortDesc());
		Assert.assertEquals(copy.getSurname(), playerGroup.getSurname());
		Assert.assertEquals(copy.getTitle(), playerGroup.getTitle());
		Assert.assertEquals(copy.getTrueGender(), playerGroup.getTrueGender());
		Assert.assertEquals(copy.getTrust(), playerGroup.getTrust());
		Assert.assertEquals(copy.getVersion(), playerGroup.getVersion());
		Assert.assertEquals(copy.getWhoname(), playerGroup.getWhoname());
		// tests for coverage completeness
		Assert.assertFalse(playerGroup.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(playerGroup.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.player_lasts.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPlayerLasts() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		PlayerLasts playerLasts = MooseDataPoolFactory.getPlayerLasts();
		dataLayerMoose.saveOrUpdate(playerLasts);

		Date playerLastsId = playerLasts.getId();
		PlayerLasts copy = playerLasts.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(playerLasts); 		 

		playerLasts = dataLayerMoose.getPlayerLasts(playerLastsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAttacked().getTime() / 1000, playerLasts.getAttacked().getTime() / 1000);
		Assert.assertEquals(copy.getAttackedBy().getTime() / 1000, playerLasts.getAttackedBy().getTime() / 1000);
		Assert.assertEquals(copy.getAttackedByTimer(), playerLasts.getAttackedByTimer());
		Assert.assertEquals(copy.getBamfIn(), playerLasts.getBamfIn());
		Assert.assertEquals(copy.getBamfOut(), playerLasts.getBamfOut());
		Assert.assertEquals(copy.getClanId(), playerLasts.getClanId());
		Assert.assertEquals(copy.getCombat().getTime() / 1000, playerLasts.getCombat().getTime() / 1000);
		Assert.assertEquals(copy.getDeathDt().getTime() / 1000, playerLasts.getDeathDt().getTime() / 1000);
		Assert.assertEquals(copy.getDescription(), playerLasts.getDescription());
		Assert.assertEquals(copy.getEmail(), playerLasts.getEmail());
		Assert.assertEquals(copy.getGender(), playerLasts.getGender());
		Assert.assertEquals(copy.getId().getTime() / 1000, playerLasts.getId().getTime() / 1000);
		Assert.assertEquals(copy.getKilled().getTime() / 1000, playerLasts.getKilled().getTime() / 1000);
		Assert.assertEquals(copy.getKilledBy().getTime() / 1000, playerLasts.getKilledBy().getTime() / 1000);
		Assert.assertEquals(copy.getKilledDt().getTime() / 1000, playerLasts.getKilledDt().getTime() / 1000);
		Assert.assertEquals(copy.getLevel(), playerLasts.getLevel());
		Assert.assertEquals(copy.getLogin().getTime() / 1000, playerLasts.getLogin().getTime() / 1000);
		Assert.assertEquals(copy.getLongDesc(), playerLasts.getLongDesc());
		Assert.assertEquals(copy.getName(), playerLasts.getName());
		Assert.assertEquals(copy.getPassword(), playerLasts.getPassword());
		Assert.assertEquals(copy.getPlayed(), playerLasts.getPlayed());
		Assert.assertEquals(copy.getRaceId(), playerLasts.getRaceId());
		Assert.assertEquals(copy.getShortDesc(), playerLasts.getShortDesc());
		Assert.assertEquals(copy.getSurname(), playerLasts.getSurname());
		Assert.assertEquals(copy.getTitle(), playerLasts.getTitle());
		Assert.assertEquals(copy.getTrueGender(), playerLasts.getTrueGender());
		Assert.assertEquals(copy.getTrust(), playerLasts.getTrust());
		Assert.assertEquals(copy.getVersion(), playerLasts.getVersion());
		Assert.assertEquals(copy.getWhoname(), playerLasts.getWhoname());
		// tests for coverage completeness
		Assert.assertFalse(playerLasts.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(playerLasts.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.player_notes.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPlayerNotes() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		PlayerNotes playerNotes = MooseDataPoolFactory.getPlayerNotes();
		dataLayerMoose.saveOrUpdate(playerNotes);

		Date playerNotesId = playerNotes.getId();
		PlayerNotes copy = playerNotes.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(playerNotes); 		 

		playerNotes = dataLayerMoose.getPlayerNotes(playerNotesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getBamfIn(), playerNotes.getBamfIn());
		Assert.assertEquals(copy.getBamfOut(), playerNotes.getBamfOut());
		Assert.assertEquals(copy.getBug(), playerNotes.getBug());
		Assert.assertEquals(copy.getChange(), playerNotes.getChange());
		Assert.assertEquals(copy.getClan(), playerNotes.getClan());
		Assert.assertEquals(copy.getClanId(), playerNotes.getClanId());
		Assert.assertEquals(copy.getDescription(), playerNotes.getDescription());
		Assert.assertEquals(copy.getEmail(), playerNotes.getEmail());
		Assert.assertEquals(copy.getGender(), playerNotes.getGender());
		Assert.assertEquals(copy.getId().getTime() / 1000, playerNotes.getId().getTime() / 1000);
		Assert.assertEquals(copy.getIdea(), playerNotes.getIdea());
		Assert.assertEquals(copy.getImmortal(), playerNotes.getImmortal());
		Assert.assertEquals(copy.getLevel(), playerNotes.getLevel());
		Assert.assertEquals(copy.getLongDesc(), playerNotes.getLongDesc());
		Assert.assertEquals(copy.getName(), playerNotes.getName());
		Assert.assertEquals(copy.getNews(), playerNotes.getNews());
		Assert.assertEquals(copy.getNote(), playerNotes.getNote());
		Assert.assertEquals(copy.getOoc(), playerNotes.getOoc());
		Assert.assertEquals(copy.getPassword(), playerNotes.getPassword());
		Assert.assertEquals(copy.getPenalty(), playerNotes.getPenalty());
		Assert.assertEquals(copy.getPlayed(), playerNotes.getPlayed());
		Assert.assertEquals(copy.getQuestion(), playerNotes.getQuestion());
		Assert.assertEquals(copy.getRaceId(), playerNotes.getRaceId());
		Assert.assertEquals(copy.getShortDesc(), playerNotes.getShortDesc());
		Assert.assertEquals(copy.getSurname(), playerNotes.getSurname());
		Assert.assertEquals(copy.getTitle(), playerNotes.getTitle());
		Assert.assertEquals(copy.getTrueGender(), playerNotes.getTrueGender());
		Assert.assertEquals(copy.getTrust(), playerNotes.getTrust());
		Assert.assertEquals(copy.getVersion(), playerNotes.getVersion());
		Assert.assertEquals(copy.getWhoname(), playerNotes.getWhoname());
		// tests for coverage completeness
		Assert.assertFalse(playerNotes.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(playerNotes.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.player_skills.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPlayerSkills() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		PlayerSkills playerSkills = MooseDataPoolFactory.getPlayerSkills();
		dataLayerMoose.saveOrUpdate(playerSkills);

		Date playerSkillsId = playerSkills.getId();
		PlayerSkills copy = playerSkills.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(playerSkills); 		 

		playerSkills = dataLayerMoose.getPlayerSkills(playerSkillsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getBamfIn(), playerSkills.getBamfIn());
		Assert.assertEquals(copy.getBamfOut(), playerSkills.getBamfOut());
		Assert.assertEquals(copy.getClanId(), playerSkills.getClanId());
		Assert.assertEquals(copy.getDescription(), playerSkills.getDescription());
		Assert.assertEquals(copy.getEmail(), playerSkills.getEmail());
		Assert.assertEquals(copy.getGender(), playerSkills.getGender());
		Assert.assertEquals(copy.getId().getTime() / 1000, playerSkills.getId().getTime() / 1000);
		Assert.assertEquals(copy.getLearnedPercent(), playerSkills.getLearnedPercent());
		Assert.assertEquals(copy.getLevel(), playerSkills.getLevel());
		Assert.assertEquals(copy.getLongDesc(), playerSkills.getLongDesc());
		Assert.assertEquals(copy.getName(), playerSkills.getName());
		Assert.assertEquals(copy.getPassword(), playerSkills.getPassword());
		Assert.assertEquals(copy.getPlayed(), playerSkills.getPlayed());
		Assert.assertEquals(copy.getRaceId(), playerSkills.getRaceId());
		Assert.assertEquals(copy.getShortDesc(), playerSkills.getShortDesc());
		Assert.assertEquals(copy.getSn().getId(), playerSkills.getSn().getId());
		Assert.assertEquals(copy.getSurname(), playerSkills.getSurname());
		Assert.assertEquals(copy.getTitle(), playerSkills.getTitle());
		Assert.assertEquals(copy.getTrueGender(), playerSkills.getTrueGender());
		Assert.assertEquals(copy.getTrust(), playerSkills.getTrust());
		Assert.assertEquals(copy.getVersion(), playerSkills.getVersion());
		Assert.assertEquals(copy.getWhoname(), playerSkills.getWhoname());
		// tests for coverage completeness
		Assert.assertFalse(playerSkills.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(playerSkills.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.player_stats.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPlayerStats() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		PlayerStats playerStats = MooseDataPoolFactory.getPlayerStats();
		dataLayerMoose.saveOrUpdate(playerStats);

		Date playerStatsId = playerStats.getId();
		PlayerStats copy = playerStats.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(playerStats); 		 

		playerStats = dataLayerMoose.getPlayerStats(playerStatsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAc0(), playerStats.getAc0());
		Assert.assertEquals(copy.getAc1(), playerStats.getAc1());
		Assert.assertEquals(copy.getAc2(), playerStats.getAc2());
		Assert.assertEquals(copy.getAc3(), playerStats.getAc3());
		Assert.assertEquals(copy.getAlignment(), playerStats.getAlignment());
		Assert.assertEquals(copy.getBamfIn(), playerStats.getBamfIn());
		Assert.assertEquals(copy.getBamfOut(), playerStats.getBamfOut());
		Assert.assertEquals(copy.getBank(), playerStats.getBank());
		Assert.assertEquals(copy.getClanId(), playerStats.getClanId());
		Assert.assertEquals(copy.getDamroll(), playerStats.getDamroll());
		Assert.assertEquals(copy.getDescription(), playerStats.getDescription());
		Assert.assertEquals(copy.getEmail(), playerStats.getEmail());
		Assert.assertEquals(copy.getGender(), playerStats.getGender());
		Assert.assertEquals(copy.getGold(), playerStats.getGold());
		Assert.assertEquals(copy.getHitroll(), playerStats.getHitroll());
		Assert.assertEquals(copy.getHp(), playerStats.getHp());
		Assert.assertEquals(copy.getId().getTime() / 1000, playerStats.getId().getTime() / 1000);
		Assert.assertEquals(copy.getIncognito(), playerStats.getIncognito());
		Assert.assertEquals(copy.getInvisible(), playerStats.getInvisible());
		Assert.assertEquals(copy.getLevel(), playerStats.getLevel());
		Assert.assertEquals(copy.getLongDesc(), playerStats.getLongDesc());
		Assert.assertEquals(copy.getMana(), playerStats.getMana());
		Assert.assertEquals(copy.getMaxHp(), playerStats.getMaxHp());
		Assert.assertEquals(copy.getMaxMana(), playerStats.getMaxMana());
		Assert.assertEquals(copy.getMaxMove(), playerStats.getMaxMove());
		Assert.assertEquals(copy.getMove(), playerStats.getMove());
		Assert.assertEquals(copy.getName(), playerStats.getName());
		Assert.assertEquals(copy.getPassword(), playerStats.getPassword());
		Assert.assertEquals(copy.getPlayed(), playerStats.getPlayed());
		Assert.assertEquals(copy.getPractice(), playerStats.getPractice());
		Assert.assertEquals(copy.getRaceId(), playerStats.getRaceId());
		Assert.assertEquals(copy.getSavingThrow(), playerStats.getSavingThrow());
		Assert.assertEquals(copy.getSecondDamroll(), playerStats.getSecondDamroll());
		Assert.assertEquals(copy.getSecondHitroll(), playerStats.getSecondHitroll());
		Assert.assertEquals(copy.getShortDesc(), playerStats.getShortDesc());
		Assert.assertEquals(copy.getSilver(), playerStats.getSilver());
		Assert.assertEquals(copy.getSkill(), playerStats.getSkill());
		Assert.assertEquals(copy.getSurname(), playerStats.getSurname());
		Assert.assertEquals(copy.getTitle(), playerStats.getTitle());
		Assert.assertEquals(copy.getTraining(), playerStats.getTraining());
		Assert.assertEquals(copy.getTrueGender(), playerStats.getTrueGender());
		Assert.assertEquals(copy.getTrust(), playerStats.getTrust());
		Assert.assertEquals(copy.getVersion(), playerStats.getVersion());
		Assert.assertEquals(copy.getWhoname(), playerStats.getWhoname());
		Assert.assertEquals(copy.getWimpy(), playerStats.getWimpy());
		// tests for coverage completeness
		Assert.assertFalse(playerStats.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(playerStats.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.races.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testRaces() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		Races races = MooseDataPoolFactory.getRaces();
		dataLayerMoose.saveOrUpdate(races);

		Long racesId = races.getId();
		Races copy = races.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(races); 		 

		races = dataLayerMoose.getRaces(racesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getName(), races.getName());
		Assert.assertEquals(copy.getStatAgt(), races.getStatAgt());
		Assert.assertEquals(copy.getStatCon(), races.getStatCon());
		Assert.assertEquals(copy.getStatDex(), races.getStatDex());
		Assert.assertEquals(copy.getStatEnd(), races.getStatEnd());
		Assert.assertEquals(copy.getStatInt(), races.getStatInt());
		Assert.assertEquals(copy.getStatSoc(), races.getStatSoc());
		Assert.assertEquals(copy.getStatStr(), races.getStatStr());
		Assert.assertEquals(copy.getStatWis(), races.getStatWis());
		// tests for coverage completeness
		Assert.assertFalse(races.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(races.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: moose.skill_spell.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testSkillSpell() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		SkillSpell skillSpell = MooseDataPoolFactory.getSkillSpell();
		dataLayerMoose.saveOrUpdate(skillSpell);

		Long skillSpellId = skillSpell.getId();
		SkillSpell copy = skillSpell.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(skillSpell); 		 

		skillSpell = dataLayerMoose.getSkillSpell(skillSpellId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		// tests for coverage completeness
		Assert.assertFalse(skillSpell.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(skillSpell.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPostCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateMooseDaoFactory.getPlayerSkillsDao().getQuery("delete from PlayerSkills").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getGroupSkillsDao().getQuery("delete from GroupSkills").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getAliasesDao().getQuery("delete from Aliases").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getSkillSpellDao().getQuery("delete from SkillSpell").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getRacesDao().getQuery("delete from Races").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerStatsDao().getQuery("delete from PlayerStats").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerNotesDao().getQuery("delete from PlayerNotes").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerLastsDao().getQuery("delete from PlayerLasts").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerGroupDao().getQuery("delete from PlayerGroup").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerGladiatorDao().getQuery("delete from PlayerGladiator").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerDeityDao().getQuery("delete from PlayerDeity").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getPlayerDao().getQuery("delete from Player").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getGroupDao().getQuery("delete from Group").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getDeityDao().getQuery("delete from Deity").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getClansDao().getQuery("delete from Clans").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateMooseDaoFactory.getAttributesDao().getQuery("delete from Attributes").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void postCleanDBFinalPass() {
	
		HibernateMooseDaoFactory.getPlayerSkillsDao().getQuery("delete from PlayerSkills").executeUpdate();
		HibernateMooseDaoFactory.getGroupSkillsDao().getQuery("delete from GroupSkills").executeUpdate();
		HibernateMooseDaoFactory.getAliasesDao().getQuery("delete from Aliases").executeUpdate();
		HibernateMooseDaoFactory.getSkillSpellDao().getQuery("delete from SkillSpell").executeUpdate();
		HibernateMooseDaoFactory.getRacesDao().getQuery("delete from Races").executeUpdate();
		HibernateMooseDaoFactory.getPlayerStatsDao().getQuery("delete from PlayerStats").executeUpdate();
		HibernateMooseDaoFactory.getPlayerNotesDao().getQuery("delete from PlayerNotes").executeUpdate();
		HibernateMooseDaoFactory.getPlayerLastsDao().getQuery("delete from PlayerLasts").executeUpdate();
		HibernateMooseDaoFactory.getPlayerGroupDao().getQuery("delete from PlayerGroup").executeUpdate();
		HibernateMooseDaoFactory.getPlayerGladiatorDao().getQuery("delete from PlayerGladiator").executeUpdate();
		HibernateMooseDaoFactory.getPlayerDeityDao().getQuery("delete from PlayerDeity").executeUpdate();
		HibernateMooseDaoFactory.getPlayerDao().getQuery("delete from Player").executeUpdate();
		HibernateMooseDaoFactory.getGroupDao().getQuery("delete from Group").executeUpdate();
		HibernateMooseDaoFactory.getDeityDao().getQuery("delete from Deity").executeUpdate();
		HibernateMooseDaoFactory.getClansDao().getQuery("delete from Clans").executeUpdate();
		HibernateMooseDaoFactory.getAttributesDao().getQuery("delete from Attributes").executeUpdate();


		
	}

}

