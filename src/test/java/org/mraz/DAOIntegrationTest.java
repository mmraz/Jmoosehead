package org.mraz;

import org.junit.Assert;
import org.junit.Test;


import org.mraz.moose.factories.moose.*;
import org.mraz.moose.model.obj.moose.*;
import org.mraz.moose.services.data.DataLayerMoose;
import org.mraz.moose.services.data.DataLayerMooseImpl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@ContextConfiguration(locations = { "/applicationContext.xml" } )
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateMooseDaoFactory.getPlayerDao().getQuery("delete from Player").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}
	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFinalPass() {
	
		HibernateMooseDaoFactory.getPlayerDao().getQuery("delete from Player").executeUpdate();


		
	}

	
	/**
	 * Hibernate test case for table: moose.player.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPlayer() throws CloneNotSupportedException {

	 	DataLayerMoose dataLayerMoose = DataLayerMooseImpl.getInstance();
		Player player = MooseDataPoolFactory.getPlayer();
		dataLayerMoose.saveOrUpdate(player);

		String playerId = player.getId();
		Player copy = player.clone();
		dataLayerMoose.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerMoose.evict(player); 		 

		player = dataLayerMoose.getPlayer(playerId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), player.getId());
		Assert.assertEquals(copy.getName(), player.getName());
		// tests for coverage completeness
		Assert.assertFalse(player.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(player.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPostCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateMooseDaoFactory.getPlayerDao().getQuery("delete from Player").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void postCleanDBFinalPass() {
	
		HibernateMooseDaoFactory.getPlayerDao().getQuery("delete from Player").executeUpdate();


		
	}

}

